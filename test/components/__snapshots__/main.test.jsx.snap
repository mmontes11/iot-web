// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/main renders a main in / path 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "REPLACE",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/things",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/things",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Main>
        <div
          className="has-navbar-fixed-top"
        >
          <withRouter(Connect(Connect(ResetOnUnmount)))>
            <Route>
              <Connect(Connect(ResetOnUnmount))
                history={
                  Object {
                    "action": "REPLACE",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "pathname": "/things",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/things",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "pathname": "/things",
                    "search": "",
                    "state": undefined,
                  }
                }
                match={
                  Object {
                    "isExact": false,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
              >
                <Connect(ResetOnUnmount)
                  history={
                    Object {
                      "action": "REPLACE",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/things",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  isHamburgerMenuExpanded={false}
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/things",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  logout={[Function]}
                  match={
                    Object {
                      "isExact": false,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  toggleHamburgerMenu={[Function]}
                >
                  <ResetOnUnmount
                    history={
                      Object {
                        "action": "REPLACE",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    isHamburgerMenuExpanded={false}
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/things",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    logout={[Function]}
                    match={
                      Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    reset={[Function]}
                    toggleHamburgerMenu={[Function]}
                  >
                    <Navbar
                      history={
                        Object {
                          "action": "REPLACE",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      isHamburgerMenuExpanded={false}
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      logout={[Function]}
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                      reset={[Function]}
                      toggleHamburgerMenu={[Function]}
                    >
                      <nav
                        className="navbar has-shadow is-spaced"
                      >
                        <div
                          className="navbar-brand"
                        >
                          <NavLink
                            activeClassName="active"
                            aria-current="page"
                            className="navbar-item"
                            to="/"
                          >
                            <Route
                              path="\\\\/"
                            >
                              <Link
                                aria-current="page"
                                className="navbar-item active"
                                replace={false}
                                style={Object {}}
                                to="/"
                              >
                                <a
                                  aria-current="page"
                                  className="navbar-item active"
                                  href="/"
                                  onClick={[Function]}
                                  style={Object {}}
                                >
                                  <h1
                                    className="title"
                                  >
                                    IoT
                                  </h1>
                                </a>
                              </Link>
                            </Route>
                          </NavLink>
                          <div
                            className="navbar-burger burger"
                            data-target="navbar-menu"
                            onClick={[Function]}
                            onKeyPress={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <span />
                            <span />
                            <span />
                          </div>
                        </div>
                        <div
                          className="navbar-menu"
                          id="navbar-menu"
                        >
                          <div
                            className="navbar-start"
                          >
                            <NavLink
                              activeClassName="navbar-item-active"
                              aria-current="page"
                              className="navbar-item"
                              to="/things"
                            >
                              <Route
                                path="\\\\/things"
                              >
                                <Link
                                  aria-current="page"
                                  className="navbar-item navbar-item-active"
                                  replace={false}
                                  style={Object {}}
                                  to="/things"
                                >
                                  <a
                                    aria-current="page"
                                    className="navbar-item navbar-item-active"
                                    href="/things"
                                    onClick={[Function]}
                                    style={Object {}}
                                  >
                                    <span
                                      className="icon"
                                    >
                                      <i
                                        className="fas fa-microchip"
                                      />
                                    </span>
                                    <span>
                                      Things
                                    </span>
                                  </a>
                                </Link>
                              </Route>
                            </NavLink>
                            <NavLink
                              activeClassName="navbar-item-active"
                              aria-current="page"
                              className="navbar-item"
                              to="/stats"
                            >
                              <Route
                                path="\\\\/stats"
                              >
                                <Link
                                  aria-current={null}
                                  className="navbar-item"
                                  replace={false}
                                  to="/stats"
                                >
                                  <a
                                    aria-current={null}
                                    className="navbar-item"
                                    href="/stats"
                                    onClick={[Function]}
                                  >
                                    <span
                                      className="icon"
                                    >
                                      <i
                                        className="fas fa-chart-bar"
                                      />
                                    </span>
                                    <span>
                                      Stats
                                    </span>
                                  </a>
                                </Link>
                              </Route>
                            </NavLink>
                          </div>
                          <div
                            className="navbar-end"
                          >
                            <div
                              className="navbar-item"
                            >
                              <div
                                className="field"
                              >
                                <p
                                  className="control"
                                >
                                  <button
                                    className="button is-primary"
                                    id="logout-button"
                                    onClick={[Function]}
                                  >
                                    <span
                                      className="icon"
                                    >
                                      <i
                                        className="fa fa-user"
                                      />
                                    </span>
                                    <span>
                                      Logout
                                    </span>
                                  </button>
                                </p>
                              </div>
                            </div>
                          </div>
                        </div>
                      </nav>
                    </Navbar>
                  </ResetOnUnmount>
                </Connect(ResetOnUnmount)>
              </Connect(Connect(ResetOnUnmount))>
            </Route>
          </withRouter(Connect(Connect(ResetOnUnmount)))>
          <main>
            <Switch>
              <Route
                component={[Function]}
                computedMatch={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/things",
                    "url": "/things",
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "pathname": "/things",
                    "search": "",
                    "state": undefined,
                  }
                }
                path="/things"
              >
                <withRouter(Connect(Connect(ResetOnUnmount)))
                  history={
                    Object {
                      "action": "REPLACE",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/things",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/things",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/things",
                      "url": "/things",
                    }
                  }
                >
                  <Route>
                    <Connect(Connect(ResetOnUnmount))
                      history={
                        Object {
                          "action": "REPLACE",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/things",
                          "url": "/things",
                        }
                      }
                    >
                      <Connect(ResetOnUnmount)
                        getThings={[Function]}
                        history={
                          Object {
                            "action": "REPLACE",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        isLoading={false}
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/things",
                            "url": "/things",
                          }
                        }
                        selectThing={[Function]}
                        selectedThing={null}
                        things={Array []}
                      >
                        <ResetOnUnmount
                          getThings={[Function]}
                          history={
                            Object {
                              "action": "REPLACE",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          isLoading={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/things",
                              "url": "/things",
                            }
                          }
                          reset={[Function]}
                          selectThing={[Function]}
                          selectedThing={null}
                          things={Array []}
                        >
                          <Things
                            getThings={[Function]}
                            history={
                              Object {
                                "action": "REPLACE",
                                "block": [Function],
                                "canGo": [Function],
                                "createHref": [Function],
                                "entries": Array [
                                  Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  },
                                ],
                                "go": [Function],
                                "goBack": [Function],
                                "goForward": [Function],
                                "index": 0,
                                "length": 1,
                                "listen": [Function],
                                "location": Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                                "push": [Function],
                                "replace": [Function],
                              }
                            }
                            isLoading={false}
                            location={
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              }
                            }
                            match={
                              Object {
                                "isExact": true,
                                "params": Object {},
                                "path": "/things",
                                "url": "/things",
                              }
                            }
                            reset={[Function]}
                            selectThing={[Function]}
                            selectedThing={null}
                            things={Array []}
                          >
                            <div
                              className="container is-fluid section"
                            >
                              <div
                                className="columns"
                              >
                                <div
                                  className="column is-one-quarter"
                                />
                              </div>
                            </div>
                          </Things>
                        </ResetOnUnmount>
                      </Connect(ResetOnUnmount)>
                    </Connect(Connect(ResetOnUnmount))>
                  </Route>
                </withRouter(Connect(Connect(ResetOnUnmount)))>
              </Route>
            </Switch>
          </main>
        </div>
      </Main>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`components/main renders a main in /foo path 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/foo",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "REPLACE",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/things",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/things",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Main>
        <div
          className="has-navbar-fixed-top"
        >
          <withRouter(Connect(Connect(ResetOnUnmount)))>
            <Route>
              <Connect(Connect(ResetOnUnmount))
                history={
                  Object {
                    "action": "REPLACE",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "pathname": "/things",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/things",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "pathname": "/things",
                    "search": "",
                    "state": undefined,
                  }
                }
                match={
                  Object {
                    "isExact": false,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
              >
                <Connect(ResetOnUnmount)
                  history={
                    Object {
                      "action": "REPLACE",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/things",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  isHamburgerMenuExpanded={false}
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/things",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  logout={[Function]}
                  match={
                    Object {
                      "isExact": false,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  toggleHamburgerMenu={[Function]}
                >
                  <ResetOnUnmount
                    history={
                      Object {
                        "action": "REPLACE",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    isHamburgerMenuExpanded={false}
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/things",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    logout={[Function]}
                    match={
                      Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    reset={[Function]}
                    toggleHamburgerMenu={[Function]}
                  >
                    <Navbar
                      history={
                        Object {
                          "action": "REPLACE",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      isHamburgerMenuExpanded={false}
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      logout={[Function]}
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                      reset={[Function]}
                      toggleHamburgerMenu={[Function]}
                    >
                      <nav
                        className="navbar has-shadow is-spaced"
                      >
                        <div
                          className="navbar-brand"
                        >
                          <NavLink
                            activeClassName="active"
                            aria-current="page"
                            className="navbar-item"
                            to="/"
                          >
                            <Route
                              path="\\\\/"
                            >
                              <Link
                                aria-current="page"
                                className="navbar-item active"
                                replace={false}
                                style={Object {}}
                                to="/"
                              >
                                <a
                                  aria-current="page"
                                  className="navbar-item active"
                                  href="/"
                                  onClick={[Function]}
                                  style={Object {}}
                                >
                                  <h1
                                    className="title"
                                  >
                                    IoT
                                  </h1>
                                </a>
                              </Link>
                            </Route>
                          </NavLink>
                          <div
                            className="navbar-burger burger"
                            data-target="navbar-menu"
                            onClick={[Function]}
                            onKeyPress={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <span />
                            <span />
                            <span />
                          </div>
                        </div>
                        <div
                          className="navbar-menu"
                          id="navbar-menu"
                        >
                          <div
                            className="navbar-start"
                          >
                            <NavLink
                              activeClassName="navbar-item-active"
                              aria-current="page"
                              className="navbar-item"
                              to="/things"
                            >
                              <Route
                                path="\\\\/things"
                              >
                                <Link
                                  aria-current="page"
                                  className="navbar-item navbar-item-active"
                                  replace={false}
                                  style={Object {}}
                                  to="/things"
                                >
                                  <a
                                    aria-current="page"
                                    className="navbar-item navbar-item-active"
                                    href="/things"
                                    onClick={[Function]}
                                    style={Object {}}
                                  >
                                    <span
                                      className="icon"
                                    >
                                      <i
                                        className="fas fa-microchip"
                                      />
                                    </span>
                                    <span>
                                      Things
                                    </span>
                                  </a>
                                </Link>
                              </Route>
                            </NavLink>
                            <NavLink
                              activeClassName="navbar-item-active"
                              aria-current="page"
                              className="navbar-item"
                              to="/stats"
                            >
                              <Route
                                path="\\\\/stats"
                              >
                                <Link
                                  aria-current={null}
                                  className="navbar-item"
                                  replace={false}
                                  to="/stats"
                                >
                                  <a
                                    aria-current={null}
                                    className="navbar-item"
                                    href="/stats"
                                    onClick={[Function]}
                                  >
                                    <span
                                      className="icon"
                                    >
                                      <i
                                        className="fas fa-chart-bar"
                                      />
                                    </span>
                                    <span>
                                      Stats
                                    </span>
                                  </a>
                                </Link>
                              </Route>
                            </NavLink>
                          </div>
                          <div
                            className="navbar-end"
                          >
                            <div
                              className="navbar-item"
                            >
                              <div
                                className="field"
                              >
                                <p
                                  className="control"
                                >
                                  <button
                                    className="button is-primary"
                                    id="logout-button"
                                    onClick={[Function]}
                                  >
                                    <span
                                      className="icon"
                                    >
                                      <i
                                        className="fa fa-user"
                                      />
                                    </span>
                                    <span>
                                      Logout
                                    </span>
                                  </button>
                                </p>
                              </div>
                            </div>
                          </div>
                        </div>
                      </nav>
                    </Navbar>
                  </ResetOnUnmount>
                </Connect(ResetOnUnmount)>
              </Connect(Connect(ResetOnUnmount))>
            </Route>
          </withRouter(Connect(Connect(ResetOnUnmount)))>
          <main>
            <Switch>
              <Route
                component={[Function]}
                computedMatch={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/things",
                    "url": "/things",
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "pathname": "/things",
                    "search": "",
                    "state": undefined,
                  }
                }
                path="/things"
              >
                <withRouter(Connect(Connect(ResetOnUnmount)))
                  history={
                    Object {
                      "action": "REPLACE",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/things",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/things",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/things",
                      "url": "/things",
                    }
                  }
                >
                  <Route>
                    <Connect(Connect(ResetOnUnmount))
                      history={
                        Object {
                          "action": "REPLACE",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/things",
                          "url": "/things",
                        }
                      }
                    >
                      <Connect(ResetOnUnmount)
                        getThings={[Function]}
                        history={
                          Object {
                            "action": "REPLACE",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        isLoading={false}
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/things",
                            "url": "/things",
                          }
                        }
                        selectThing={[Function]}
                        selectedThing={null}
                        things={Array []}
                      >
                        <ResetOnUnmount
                          getThings={[Function]}
                          history={
                            Object {
                              "action": "REPLACE",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          isLoading={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/things",
                              "url": "/things",
                            }
                          }
                          reset={[Function]}
                          selectThing={[Function]}
                          selectedThing={null}
                          things={Array []}
                        >
                          <Things
                            getThings={[Function]}
                            history={
                              Object {
                                "action": "REPLACE",
                                "block": [Function],
                                "canGo": [Function],
                                "createHref": [Function],
                                "entries": Array [
                                  Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  },
                                ],
                                "go": [Function],
                                "goBack": [Function],
                                "goForward": [Function],
                                "index": 0,
                                "length": 1,
                                "listen": [Function],
                                "location": Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                                "push": [Function],
                                "replace": [Function],
                              }
                            }
                            isLoading={false}
                            location={
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              }
                            }
                            match={
                              Object {
                                "isExact": true,
                                "params": Object {},
                                "path": "/things",
                                "url": "/things",
                              }
                            }
                            reset={[Function]}
                            selectThing={[Function]}
                            selectedThing={null}
                            things={Array []}
                          >
                            <div
                              className="container is-fluid section"
                            >
                              <div
                                className="columns"
                              >
                                <div
                                  className="column is-one-quarter"
                                />
                              </div>
                            </div>
                          </Things>
                        </ResetOnUnmount>
                      </Connect(ResetOnUnmount)>
                    </Connect(Connect(ResetOnUnmount))>
                  </Route>
                </withRouter(Connect(Connect(ResetOnUnmount)))>
              </Route>
            </Switch>
          </main>
        </div>
      </Main>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`components/main renders a main in /stats path 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/stats",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/stats",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/stats",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Main>
        <div
          className="has-navbar-fixed-top"
        >
          <withRouter(Connect(Connect(ResetOnUnmount)))>
            <Route>
              <Connect(Connect(ResetOnUnmount))
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "pathname": "/stats",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/stats",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "pathname": "/stats",
                    "search": "",
                    "state": undefined,
                  }
                }
                match={
                  Object {
                    "isExact": false,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
              >
                <Connect(ResetOnUnmount)
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "pathname": "/stats",
                          "search": "",
                          "state": undefined,
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/stats",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  isHamburgerMenuExpanded={false}
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/stats",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  logout={[Function]}
                  match={
                    Object {
                      "isExact": false,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  toggleHamburgerMenu={[Function]}
                >
                  <ResetOnUnmount
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/stats",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/stats",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    isHamburgerMenuExpanded={false}
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/stats",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    logout={[Function]}
                    match={
                      Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    reset={[Function]}
                    toggleHamburgerMenu={[Function]}
                  >
                    <Navbar
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/stats",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/stats",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      isHamburgerMenuExpanded={false}
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/stats",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      logout={[Function]}
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                      reset={[Function]}
                      toggleHamburgerMenu={[Function]}
                    >
                      <nav
                        className="navbar has-shadow is-spaced"
                      >
                        <div
                          className="navbar-brand"
                        >
                          <NavLink
                            activeClassName="active"
                            aria-current="page"
                            className="navbar-item"
                            to="/"
                          >
                            <Route
                              path="\\\\/"
                            >
                              <Link
                                aria-current="page"
                                className="navbar-item active"
                                replace={false}
                                style={Object {}}
                                to="/"
                              >
                                <a
                                  aria-current="page"
                                  className="navbar-item active"
                                  href="/"
                                  onClick={[Function]}
                                  style={Object {}}
                                >
                                  <h1
                                    className="title"
                                  >
                                    IoT
                                  </h1>
                                </a>
                              </Link>
                            </Route>
                          </NavLink>
                          <div
                            className="navbar-burger burger"
                            data-target="navbar-menu"
                            onClick={[Function]}
                            onKeyPress={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <span />
                            <span />
                            <span />
                          </div>
                        </div>
                        <div
                          className="navbar-menu"
                          id="navbar-menu"
                        >
                          <div
                            className="navbar-start"
                          >
                            <NavLink
                              activeClassName="navbar-item-active"
                              aria-current="page"
                              className="navbar-item"
                              to="/things"
                            >
                              <Route
                                path="\\\\/things"
                              >
                                <Link
                                  aria-current={null}
                                  className="navbar-item"
                                  replace={false}
                                  to="/things"
                                >
                                  <a
                                    aria-current={null}
                                    className="navbar-item"
                                    href="/things"
                                    onClick={[Function]}
                                  >
                                    <span
                                      className="icon"
                                    >
                                      <i
                                        className="fas fa-microchip"
                                      />
                                    </span>
                                    <span>
                                      Things
                                    </span>
                                  </a>
                                </Link>
                              </Route>
                            </NavLink>
                            <NavLink
                              activeClassName="navbar-item-active"
                              aria-current="page"
                              className="navbar-item"
                              to="/stats"
                            >
                              <Route
                                path="\\\\/stats"
                              >
                                <Link
                                  aria-current="page"
                                  className="navbar-item navbar-item-active"
                                  replace={false}
                                  style={Object {}}
                                  to="/stats"
                                >
                                  <a
                                    aria-current="page"
                                    className="navbar-item navbar-item-active"
                                    href="/stats"
                                    onClick={[Function]}
                                    style={Object {}}
                                  >
                                    <span
                                      className="icon"
                                    >
                                      <i
                                        className="fas fa-chart-bar"
                                      />
                                    </span>
                                    <span>
                                      Stats
                                    </span>
                                  </a>
                                </Link>
                              </Route>
                            </NavLink>
                          </div>
                          <div
                            className="navbar-end"
                          >
                            <div
                              className="navbar-item"
                            >
                              <div
                                className="field"
                              >
                                <p
                                  className="control"
                                >
                                  <button
                                    className="button is-primary"
                                    id="logout-button"
                                    onClick={[Function]}
                                  >
                                    <span
                                      className="icon"
                                    >
                                      <i
                                        className="fa fa-user"
                                      />
                                    </span>
                                    <span>
                                      Logout
                                    </span>
                                  </button>
                                </p>
                              </div>
                            </div>
                          </div>
                        </div>
                      </nav>
                    </Navbar>
                  </ResetOnUnmount>
                </Connect(ResetOnUnmount)>
              </Connect(Connect(ResetOnUnmount))>
            </Route>
          </withRouter(Connect(Connect(ResetOnUnmount)))>
          <main>
            <Switch>
              <Route
                component={[Function]}
                computedMatch={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/stats",
                    "url": "/stats",
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "pathname": "/stats",
                    "search": "",
                    "state": undefined,
                  }
                }
                path="/stats"
              >
                <Connect(ResetOnUnmount)
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "pathname": "/stats",
                          "search": "",
                          "state": undefined,
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/stats",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/stats",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/stats",
                      "url": "/stats",
                    }
                  }
                >
                  <ResetOnUnmount
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/stats",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/stats",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/stats",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    match={
                      Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/stats",
                        "url": "/stats",
                      }
                    }
                    reset={[Function]}
                  >
                    <Stats
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/stats",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/stats",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/stats",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/stats",
                          "url": "/stats",
                        }
                      }
                      reset={[Function]}
                    >
                      <div
                        className="container is-fluid section"
                      >
                        <div
                          className="box level"
                        >
                          <div
                            className="level-left"
                          >
                            <div
                              className="level-item"
                            >
                              <Dropdown
                                isActive={true}
                                isDisabled={false}
                                isLoading={false}
                                items={
                                  Array [
                                    "Item1",
                                    "Item2",
                                    "Item3",
                                  ]
                                }
                                label="Select Type"
                                onButtonClick={[Function]}
                                onItemClick={[Function]}
                              >
                                <div
                                  className="dropdown is-active"
                                >
                                  <div
                                    className="dropdown-trigger"
                                  >
                                    <button
                                      aria-controls="dropdown-menu"
                                      aria-haspopup="true"
                                      className="button"
                                      disabled={false}
                                      onClick={[Function]}
                                    >
                                      <span>
                                        Select Type
                                      </span>
                                      <span
                                        className="icon is-small"
                                      >
                                        <i
                                          aria-hidden="true"
                                          className="fas fa-angle-down"
                                        />
                                      </span>
                                    </button>
                                  </div>
                                  <div
                                    className="dropdown-menu"
                                    id="dropdown-menu"
                                    role="menu"
                                  >
                                    <div
                                      className="dropdown-content"
                                    >
                                      <div
                                        className="dropdown-item"
                                        key="SXRlbTE="
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        Item1
                                      </div>
                                      <div
                                        className="dropdown-item"
                                        key="SXRlbTI="
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        Item2
                                      </div>
                                      <div
                                        className="dropdown-item"
                                        key="SXRlbTM="
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        Item3
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </Dropdown>
                              <Dropdown
                                isActive={false}
                                isDisabled={false}
                                isLoading={true}
                                items={
                                  Array [
                                    "Item1",
                                    "Item2",
                                    "Item3",
                                  ]
                                }
                                label="Select Thing"
                                onButtonClick={[Function]}
                                onItemClick={[Function]}
                              >
                                <div
                                  className="dropdown"
                                >
                                  <div
                                    className="dropdown-trigger"
                                  >
                                    <button
                                      aria-controls="dropdown-menu"
                                      aria-haspopup="true"
                                      className="button is-loading"
                                      disabled={false}
                                      onClick={[Function]}
                                    >
                                      <span>
                                        Select Thing
                                      </span>
                                      <span
                                        className="icon is-small"
                                      >
                                        <i
                                          aria-hidden="true"
                                          className="fas fa-angle-down"
                                        />
                                      </span>
                                    </button>
                                  </div>
                                  <div
                                    className="dropdown-menu"
                                    id="dropdown-menu"
                                    role="menu"
                                  >
                                    <div
                                      className="dropdown-content"
                                    >
                                      <div
                                        className="dropdown-item"
                                        key="SXRlbTE="
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        Item1
                                      </div>
                                      <div
                                        className="dropdown-item"
                                        key="SXRlbTI="
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        Item2
                                      </div>
                                      <div
                                        className="dropdown-item"
                                        key="SXRlbTM="
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        Item3
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </Dropdown>
                              <Dropdown
                                isActive={false}
                                isDisabled={true}
                                isLoading={false}
                                items={
                                  Array [
                                    "Item1",
                                    "Item2",
                                    "Item3",
                                  ]
                                }
                                label="Select Time Period"
                                onButtonClick={[Function]}
                                onItemClick={[Function]}
                              >
                                <div
                                  className="dropdown"
                                >
                                  <div
                                    className="dropdown-trigger"
                                  >
                                    <button
                                      aria-controls="dropdown-menu"
                                      aria-haspopup="true"
                                      className="button"
                                      disabled={true}
                                      onClick={[Function]}
                                    >
                                      <span>
                                        Select Time Period
                                      </span>
                                      <span
                                        className="icon is-small"
                                      >
                                        <i
                                          aria-hidden="true"
                                          className="fas fa-angle-down"
                                        />
                                      </span>
                                    </button>
                                  </div>
                                  <div
                                    className="dropdown-menu"
                                    id="dropdown-menu"
                                    role="menu"
                                  >
                                    <div
                                      className="dropdown-content"
                                    >
                                      <div
                                        className="dropdown-item"
                                        key="SXRlbTE="
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        Item1
                                      </div>
                                      <div
                                        className="dropdown-item"
                                        key="SXRlbTI="
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        Item2
                                      </div>
                                      <div
                                        className="dropdown-item"
                                        key="SXRlbTM="
                                        onClick={[Function]}
                                        onKeyPress={[Function]}
                                        role="button"
                                        tabIndex={0}
                                      >
                                        Item3
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </Dropdown>
                            </div>
                          </div>
                        </div>
                      </div>
                    </Stats>
                  </ResetOnUnmount>
                </Connect(ResetOnUnmount)>
              </Route>
            </Switch>
          </main>
        </div>
      </Main>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`components/main renders a main in /things path 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/things",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/things",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/things",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Main>
        <div
          className="has-navbar-fixed-top"
        >
          <withRouter(Connect(Connect(ResetOnUnmount)))>
            <Route>
              <Connect(Connect(ResetOnUnmount))
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "pathname": "/things",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/things",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "pathname": "/things",
                    "search": "",
                    "state": undefined,
                  }
                }
                match={
                  Object {
                    "isExact": false,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
              >
                <Connect(ResetOnUnmount)
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/things",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  isHamburgerMenuExpanded={false}
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/things",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  logout={[Function]}
                  match={
                    Object {
                      "isExact": false,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  toggleHamburgerMenu={[Function]}
                >
                  <ResetOnUnmount
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    isHamburgerMenuExpanded={false}
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/things",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    logout={[Function]}
                    match={
                      Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    reset={[Function]}
                    toggleHamburgerMenu={[Function]}
                  >
                    <Navbar
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      isHamburgerMenuExpanded={false}
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      logout={[Function]}
                      match={
                        Object {
                          "isExact": false,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                      reset={[Function]}
                      toggleHamburgerMenu={[Function]}
                    >
                      <nav
                        className="navbar has-shadow is-spaced"
                      >
                        <div
                          className="navbar-brand"
                        >
                          <NavLink
                            activeClassName="active"
                            aria-current="page"
                            className="navbar-item"
                            to="/"
                          >
                            <Route
                              path="\\\\/"
                            >
                              <Link
                                aria-current="page"
                                className="navbar-item active"
                                replace={false}
                                style={Object {}}
                                to="/"
                              >
                                <a
                                  aria-current="page"
                                  className="navbar-item active"
                                  href="/"
                                  onClick={[Function]}
                                  style={Object {}}
                                >
                                  <h1
                                    className="title"
                                  >
                                    IoT
                                  </h1>
                                </a>
                              </Link>
                            </Route>
                          </NavLink>
                          <div
                            className="navbar-burger burger"
                            data-target="navbar-menu"
                            onClick={[Function]}
                            onKeyPress={[Function]}
                            role="button"
                            tabIndex={0}
                          >
                            <span />
                            <span />
                            <span />
                          </div>
                        </div>
                        <div
                          className="navbar-menu"
                          id="navbar-menu"
                        >
                          <div
                            className="navbar-start"
                          >
                            <NavLink
                              activeClassName="navbar-item-active"
                              aria-current="page"
                              className="navbar-item"
                              to="/things"
                            >
                              <Route
                                path="\\\\/things"
                              >
                                <Link
                                  aria-current="page"
                                  className="navbar-item navbar-item-active"
                                  replace={false}
                                  style={Object {}}
                                  to="/things"
                                >
                                  <a
                                    aria-current="page"
                                    className="navbar-item navbar-item-active"
                                    href="/things"
                                    onClick={[Function]}
                                    style={Object {}}
                                  >
                                    <span
                                      className="icon"
                                    >
                                      <i
                                        className="fas fa-microchip"
                                      />
                                    </span>
                                    <span>
                                      Things
                                    </span>
                                  </a>
                                </Link>
                              </Route>
                            </NavLink>
                            <NavLink
                              activeClassName="navbar-item-active"
                              aria-current="page"
                              className="navbar-item"
                              to="/stats"
                            >
                              <Route
                                path="\\\\/stats"
                              >
                                <Link
                                  aria-current={null}
                                  className="navbar-item"
                                  replace={false}
                                  to="/stats"
                                >
                                  <a
                                    aria-current={null}
                                    className="navbar-item"
                                    href="/stats"
                                    onClick={[Function]}
                                  >
                                    <span
                                      className="icon"
                                    >
                                      <i
                                        className="fas fa-chart-bar"
                                      />
                                    </span>
                                    <span>
                                      Stats
                                    </span>
                                  </a>
                                </Link>
                              </Route>
                            </NavLink>
                          </div>
                          <div
                            className="navbar-end"
                          >
                            <div
                              className="navbar-item"
                            >
                              <div
                                className="field"
                              >
                                <p
                                  className="control"
                                >
                                  <button
                                    className="button is-primary"
                                    id="logout-button"
                                    onClick={[Function]}
                                  >
                                    <span
                                      className="icon"
                                    >
                                      <i
                                        className="fa fa-user"
                                      />
                                    </span>
                                    <span>
                                      Logout
                                    </span>
                                  </button>
                                </p>
                              </div>
                            </div>
                          </div>
                        </div>
                      </nav>
                    </Navbar>
                  </ResetOnUnmount>
                </Connect(ResetOnUnmount)>
              </Connect(Connect(ResetOnUnmount))>
            </Route>
          </withRouter(Connect(Connect(ResetOnUnmount)))>
          <main>
            <Switch>
              <Route
                component={[Function]}
                computedMatch={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/things",
                    "url": "/things",
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "pathname": "/things",
                    "search": "",
                    "state": undefined,
                  }
                }
                path="/things"
              >
                <withRouter(Connect(Connect(ResetOnUnmount)))
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/things",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/things",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/things",
                      "url": "/things",
                    }
                  }
                >
                  <Route>
                    <Connect(Connect(ResetOnUnmount))
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/things",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/things",
                          "url": "/things",
                        }
                      }
                    >
                      <Connect(ResetOnUnmount)
                        getThings={[Function]}
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        isLoading={false}
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/things",
                            "url": "/things",
                          }
                        }
                        selectThing={[Function]}
                        selectedThing={null}
                        things={Array []}
                      >
                        <ResetOnUnmount
                          getThings={[Function]}
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          isLoading={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/things",
                              "url": "/things",
                            }
                          }
                          reset={[Function]}
                          selectThing={[Function]}
                          selectedThing={null}
                          things={Array []}
                        >
                          <Things
                            getThings={[Function]}
                            history={
                              Object {
                                "action": "POP",
                                "block": [Function],
                                "canGo": [Function],
                                "createHref": [Function],
                                "entries": Array [
                                  Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  },
                                ],
                                "go": [Function],
                                "goBack": [Function],
                                "goForward": [Function],
                                "index": 0,
                                "length": 1,
                                "listen": [Function],
                                "location": Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                                "push": [Function],
                                "replace": [Function],
                              }
                            }
                            isLoading={false}
                            location={
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              }
                            }
                            match={
                              Object {
                                "isExact": true,
                                "params": Object {},
                                "path": "/things",
                                "url": "/things",
                              }
                            }
                            reset={[Function]}
                            selectThing={[Function]}
                            selectedThing={null}
                            things={Array []}
                          >
                            <div
                              className="container is-fluid section"
                            >
                              <div
                                className="columns"
                              >
                                <div
                                  className="column is-one-quarter"
                                />
                              </div>
                            </div>
                          </Things>
                        </ResetOnUnmount>
                      </Connect(ResetOnUnmount)>
                    </Connect(Connect(ResetOnUnmount))>
                  </Route>
                </withRouter(Connect(Connect(ResetOnUnmount)))>
              </Route>
            </Switch>
          </main>
        </div>
      </Main>
    </Provider>
  </Router>
</MemoryRouter>
`;
