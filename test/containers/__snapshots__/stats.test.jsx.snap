// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`containers/stats renders stats barcharts 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <withRouter(Connect(DataParams))>
        <Route>
          <Connect(DataParams)
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
          >
            <DataParams
              addCustomTimePeriodFilter={[Function]}
              addThingFilter={[Function]}
              addTimePeriodFilter={[Function]}
              hasError={false}
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              updateParams={[Function]}
            >
              <Connect(ResetOnUnmount)
                addCustomTimePeriodFilter={[Function]}
                addThingFilter={[Function]}
                addTimePeriodFilter={[Function]}
                hasError={false}
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  }
                }
                match={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
                onFiltersSelected={[Function]}
                onParamsSelected={[Function]}
                onReset={[Function]}
                updateParams={[Function]}
              >
                <ResetOnUnmount
                  addCustomTimePeriodFilter={[Function]}
                  addThingFilter={[Function]}
                  addTimePeriodFilter={[Function]}
                  hasError={false}
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  onFiltersSelected={[Function]}
                  onParamsSelected={[Function]}
                  onReset={[Function]}
                  reset={[Function]}
                  updateParams={[Function]}
                >
                  <Stats
                    addCustomTimePeriodFilter={[Function]}
                    addThingFilter={[Function]}
                    addTimePeriodFilter={[Function]}
                    hasError={false}
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    match={
                      Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    onFiltersSelected={[Function]}
                    onParamsSelected={[Function]}
                    onReset={[Function]}
                    reset={[Function]}
                    updateParams={[Function]}
                  >
                    <div
                      className="container is-fluid section"
                    >
                      <div
                        className="columns"
                      >
                        <div
                          className="column is-three-quarters"
                        >
                          <Connect(Connect(ResetOnUnmount))
                            onParamsSelected={[Function]}
                            onReset={[Function]}
                          >
                            <Connect(ResetOnUnmount)
                              isResetDisabled={true}
                              observation={Object {}}
                              onParamsSelected={[Function]}
                              onReset={[Function]}
                              selectObservation={[Function]}
                              selectType={[Function]}
                              type={Object {}}
                              updateObservation={[Function]}
                              updateParams={[Function]}
                              updateType={[Function]}
                            >
                              <ResetOnUnmount
                                isResetDisabled={true}
                                observation={Object {}}
                                onParamsSelected={[Function]}
                                onReset={[Function]}
                                reset={[Function]}
                                selectObservation={[Function]}
                                selectType={[Function]}
                                type={Object {}}
                                updateObservation={[Function]}
                                updateParams={[Function]}
                                updateType={[Function]}
                              >
                                <StatsParamsPanel
                                  isResetDisabled={true}
                                  observation={Object {}}
                                  onParamsSelected={[Function]}
                                  onReset={[Function]}
                                  reset={[Function]}
                                  selectObservation={[Function]}
                                  selectType={[Function]}
                                  type={Object {}}
                                  updateObservation={[Function]}
                                  updateParams={[Function]}
                                  updateType={[Function]}
                                >
                                  <ParamsPanel
                                    params={
                                      Array [
                                        Object {
                                          "isActive": false,
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "items": Array [],
                                          "key": "type",
                                          "label": "Select type",
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                        },
                                        Object {
                                          "isActive": false,
                                          "isDisabled": true,
                                          "isLoading": false,
                                          "items": Array [],
                                          "key": "observation",
                                          "label": "Select observation",
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                        },
                                      ]
                                    }
                                    reset={
                                      Object {
                                        "isDisabled": true,
                                        "onReset": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="box"
                                    >
                                      <div
                                        className="columns"
                                      >
                                        <div
                                          className="column"
                                          key="type"
                                        >
                                          <Dropdown
                                            buttonStyle=""
                                            iconStyle="fa-angle-down"
                                            isActive={false}
                                            isDisabled={false}
                                            isLoading={false}
                                            items={Array []}
                                            label="Select type"
                                            onButtonClick={[Function]}
                                            onItemClick={[Function]}
                                          >
                                            <div
                                              className="dropdown"
                                            >
                                              <div
                                                className="dropdown-trigger"
                                              >
                                                <button
                                                  aria-controls="dropdown-menu"
                                                  aria-haspopup="true"
                                                  className="button"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                >
                                                  <span>
                                                    Select type
                                                  </span>
                                                  <span
                                                    className="icon is-small"
                                                  >
                                                    <i
                                                      aria-hidden="true"
                                                      className="fas fa-angle-down"
                                                    />
                                                  </span>
                                                </button>
                                              </div>
                                              <div
                                                className="dropdown-menu"
                                                id="dropdown-menu"
                                                role="menu"
                                              >
                                                <div
                                                  className="dropdown-content"
                                                />
                                              </div>
                                            </div>
                                          </Dropdown>
                                        </div>
                                        <div
                                          className="column"
                                          key="observation"
                                        >
                                          <Dropdown
                                            buttonStyle=""
                                            iconStyle="fa-angle-down"
                                            isActive={false}
                                            isDisabled={true}
                                            isLoading={false}
                                            items={Array []}
                                            label="Select observation"
                                            onButtonClick={[Function]}
                                            onItemClick={[Function]}
                                          >
                                            <div
                                              className="dropdown"
                                            >
                                              <div
                                                className="dropdown-trigger"
                                              >
                                                <button
                                                  aria-controls="dropdown-menu"
                                                  aria-haspopup="true"
                                                  className="button"
                                                  disabled={true}
                                                  onClick={[Function]}
                                                >
                                                  <span>
                                                    Select observation
                                                  </span>
                                                  <span
                                                    className="icon is-small"
                                                  >
                                                    <i
                                                      aria-hidden="true"
                                                      className="fas fa-angle-down"
                                                    />
                                                  </span>
                                                </button>
                                              </div>
                                              <div
                                                className="dropdown-menu"
                                                id="dropdown-menu"
                                                role="menu"
                                              >
                                                <div
                                                  className="dropdown-content"
                                                />
                                              </div>
                                            </div>
                                          </Dropdown>
                                        </div>
                                        <div
                                          className="column is-2"
                                        >
                                          <button
                                            className="button is-warning is-fullwidth"
                                            disabled={true}
                                            onClick={[Function]}
                                          >
                                            <span>
                                              Reset
                                            </span>
                                            <span
                                              className="icon is-small"
                                            >
                                              <i
                                                aria-hidden="true"
                                                className="fas fa-eraser"
                                              />
                                            </span>
                                          </button>
                                        </div>
                                      </div>
                                    </div>
                                  </ParamsPanel>
                                </StatsParamsPanel>
                              </ResetOnUnmount>
                            </Connect(ResetOnUnmount)>
                          </Connect(Connect(ResetOnUnmount))>
                          <Connect(Charts)
                            chartType="BARCHART"
                          >
                            <Charts
                              chartType="BARCHART"
                              dispatch={[Function]}
                              isLoading={false}
                              items={Array []}
                            />
                          </Connect(Charts)>
                        </div>
                        <div
                          className="column is-one-quarter"
                        >
                          <Connect(Connect(ResetOnUnmount))
                            onFiltersSelected={[Function]}
                          >
                            <Connect(ResetOnUnmount)
                              addCustomTimePeriodFilter={[Function]}
                              addFilterType={[Function]}
                              addThingFilter={[Function]}
                              addTimePeriodFilter={[Function]}
                              dateFilter={
                                Object {
                                  "custom": Object {
                                    "endDate": null,
                                    "startDate": null,
                                  },
                                  "isCustomSelected": false,
                                  "timePeriod": Object {
                                    "isActive": false,
                                    "isDisabled": false,
                                    "isLoading": false,
                                    "items": Array [],
                                    "selectedItem": null,
                                  },
                                }
                              }
                              deleteFilterType={[Function]}
                              onFiltersSelected={[Function]}
                              selectFilterType={[Function]}
                              selectThingFilter={[Function]}
                              selectTimePeriod={[Function]}
                              selectedFilters={Array []}
                              thingFilter={
                                Object {
                                  "isActive": false,
                                  "isDisabled": false,
                                  "isLoading": false,
                                  "items": Array [],
                                  "selectedItem": null,
                                }
                              }
                              toggleDateFilterType={[Function]}
                              type={
                                Object {
                                  "isActive": false,
                                  "isDisabled": false,
                                  "items": Array [
                                    "thing",
                                    "date",
                                  ],
                                }
                              }
                              updateEndDate={[Function]}
                              updateStartDate={[Function]}
                              updateThingFilter={[Function]}
                              updateTimePeriod={[Function]}
                            >
                              <ResetOnUnmount
                                addCustomTimePeriodFilter={[Function]}
                                addFilterType={[Function]}
                                addThingFilter={[Function]}
                                addTimePeriodFilter={[Function]}
                                dateFilter={
                                  Object {
                                    "custom": Object {
                                      "endDate": null,
                                      "startDate": null,
                                    },
                                    "isCustomSelected": false,
                                    "timePeriod": Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    },
                                  }
                                }
                                deleteFilterType={[Function]}
                                onFiltersSelected={[Function]}
                                reset={[Function]}
                                selectFilterType={[Function]}
                                selectThingFilter={[Function]}
                                selectTimePeriod={[Function]}
                                selectedFilters={Array []}
                                thingFilter={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": false,
                                    "isLoading": false,
                                    "items": Array [],
                                    "selectedItem": null,
                                  }
                                }
                                toggleDateFilterType={[Function]}
                                type={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": false,
                                    "items": Array [
                                      "thing",
                                      "date",
                                    ],
                                  }
                                }
                                updateEndDate={[Function]}
                                updateStartDate={[Function]}
                                updateThingFilter={[Function]}
                                updateTimePeriod={[Function]}
                              >
                                <StatsFiltersPanel
                                  addCustomTimePeriodFilter={[Function]}
                                  addFilterType={[Function]}
                                  addThingFilter={[Function]}
                                  addTimePeriodFilter={[Function]}
                                  dateFilter={
                                    Object {
                                      "custom": Object {
                                        "endDate": null,
                                        "startDate": null,
                                      },
                                      "isCustomSelected": false,
                                      "timePeriod": Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "items": Array [],
                                        "selectedItem": null,
                                      },
                                    }
                                  }
                                  deleteFilterType={[Function]}
                                  onFiltersSelected={[Function]}
                                  reset={[Function]}
                                  selectFilterType={[Function]}
                                  selectThingFilter={[Function]}
                                  selectTimePeriod={[Function]}
                                  selectedFilters={Array []}
                                  statsType={null}
                                  thingFilter={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    }
                                  }
                                  toggleDateFilterType={[Function]}
                                  type={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "items": Array [
                                        "thing",
                                        "date",
                                      ],
                                    }
                                  }
                                  updateEndDate={[Function]}
                                  updateStartDate={[Function]}
                                  updateThingFilter={[Function]}
                                  updateTimePeriod={[Function]}
                                >
                                  <FiltersPanel
                                    dateFilter={
                                      Object {
                                        "custom": Object {
                                          "endDate": Object {
                                            "onChange": [Function],
                                            "selected": null,
                                          },
                                          "startDate": Object {
                                            "onChange": [Function],
                                            "selected": null,
                                          },
                                        },
                                        "isCustomSelected": false,
                                        "onDelete": [Function],
                                        "selector": Object {
                                          "isCustomSelected": false,
                                          "onChange": [Function],
                                        },
                                        "timePeriod": Object {
                                          "isActive": false,
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "items": Array [],
                                          "label": "Select Time Period:",
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                          "selectedItem": null,
                                        },
                                      }
                                    }
                                    selectedFilters={Array []}
                                    thingFilter={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "items": Array [],
                                        "label": "Select Thing: ",
                                        "onButtonClick": [Function],
                                        "onDelete": [Function],
                                        "onItemClick": [Function],
                                        "selectedItem": null,
                                      }
                                    }
                                    type={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "items": Array [
                                          "thing",
                                          "date",
                                        ],
                                        "onButtonClick": [Function],
                                        "onItemClick": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="box"
                                    >
                                      <div
                                        className="columns"
                                      >
                                        <div
                                          className="column"
                                        >
                                          <Dropdown
                                            buttonStyle="is-primary"
                                            iconStyle="fa-plus"
                                            isActive={false}
                                            isDisabled={false}
                                            isLoading={false}
                                            items={
                                              Array [
                                                "thing",
                                                "date",
                                              ]
                                            }
                                            label="Filters"
                                            onButtonClick={[Function]}
                                            onItemClick={[Function]}
                                          >
                                            <div
                                              className="dropdown"
                                            >
                                              <div
                                                className="dropdown-trigger"
                                              >
                                                <button
                                                  aria-controls="dropdown-menu"
                                                  aria-haspopup="true"
                                                  className="button is-primary"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                >
                                                  <span>
                                                    Filters
                                                  </span>
                                                  <span
                                                    className="icon is-small"
                                                  >
                                                    <i
                                                      aria-hidden="true"
                                                      className="fas fa-plus"
                                                    />
                                                  </span>
                                                </button>
                                              </div>
                                              <div
                                                className="dropdown-menu"
                                                id="dropdown-menu"
                                                role="menu"
                                              >
                                                <div
                                                  className="dropdown-content"
                                                >
                                                  <div
                                                    className="dropdown-item"
                                                    key="thing"
                                                    onClick={[Function]}
                                                    onKeyPress={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    thing
                                                  </div>
                                                  <div
                                                    className="dropdown-item"
                                                    key="date"
                                                    onClick={[Function]}
                                                    onKeyPress={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    date
                                                  </div>
                                                </div>
                                              </div>
                                            </div>
                                          </Dropdown>
                                        </div>
                                      </div>
                                    </div>
                                  </FiltersPanel>
                                </StatsFiltersPanel>
                              </ResetOnUnmount>
                            </Connect(ResetOnUnmount)>
                          </Connect(Connect(ResetOnUnmount))>
                        </div>
                      </div>
                    </div>
                  </Stats>
                </ResetOnUnmount>
              </Connect(ResetOnUnmount)>
            </DataParams>
          </Connect(DataParams)>
        </Route>
      </withRouter(Connect(DataParams))>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`containers/stats renders stats in initial state 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <withRouter(Connect(DataParams))>
        <Route>
          <Connect(DataParams)
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
          >
            <DataParams
              addCustomTimePeriodFilter={[Function]}
              addThingFilter={[Function]}
              addTimePeriodFilter={[Function]}
              hasError={false}
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              updateParams={[Function]}
            >
              <Connect(ResetOnUnmount)
                addCustomTimePeriodFilter={[Function]}
                addThingFilter={[Function]}
                addTimePeriodFilter={[Function]}
                hasError={false}
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  }
                }
                match={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
                onFiltersSelected={[Function]}
                onParamsSelected={[Function]}
                onReset={[Function]}
                updateParams={[Function]}
              >
                <ResetOnUnmount
                  addCustomTimePeriodFilter={[Function]}
                  addThingFilter={[Function]}
                  addTimePeriodFilter={[Function]}
                  hasError={false}
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  onFiltersSelected={[Function]}
                  onParamsSelected={[Function]}
                  onReset={[Function]}
                  reset={[Function]}
                  updateParams={[Function]}
                >
                  <Stats
                    addCustomTimePeriodFilter={[Function]}
                    addThingFilter={[Function]}
                    addTimePeriodFilter={[Function]}
                    hasError={false}
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    match={
                      Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    onFiltersSelected={[Function]}
                    onParamsSelected={[Function]}
                    onReset={[Function]}
                    reset={[Function]}
                    updateParams={[Function]}
                  >
                    <div
                      className="container is-fluid section"
                    >
                      <div
                        className="columns"
                      >
                        <div
                          className="column is-three-quarters"
                        >
                          <Connect(Connect(ResetOnUnmount))
                            onParamsSelected={[Function]}
                            onReset={[Function]}
                          >
                            <Connect(ResetOnUnmount)
                              isResetDisabled={true}
                              observation={Object {}}
                              onParamsSelected={[Function]}
                              onReset={[Function]}
                              selectObservation={[Function]}
                              selectType={[Function]}
                              type={Object {}}
                              updateObservation={[Function]}
                              updateParams={[Function]}
                              updateType={[Function]}
                            >
                              <ResetOnUnmount
                                isResetDisabled={true}
                                observation={Object {}}
                                onParamsSelected={[Function]}
                                onReset={[Function]}
                                reset={[Function]}
                                selectObservation={[Function]}
                                selectType={[Function]}
                                type={Object {}}
                                updateObservation={[Function]}
                                updateParams={[Function]}
                                updateType={[Function]}
                              >
                                <StatsParamsPanel
                                  isResetDisabled={true}
                                  observation={Object {}}
                                  onParamsSelected={[Function]}
                                  onReset={[Function]}
                                  reset={[Function]}
                                  selectObservation={[Function]}
                                  selectType={[Function]}
                                  type={Object {}}
                                  updateObservation={[Function]}
                                  updateParams={[Function]}
                                  updateType={[Function]}
                                >
                                  <ParamsPanel
                                    params={
                                      Array [
                                        Object {
                                          "isActive": false,
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "items": Array [],
                                          "key": "type",
                                          "label": "Select type",
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                        },
                                        Object {
                                          "isActive": false,
                                          "isDisabled": true,
                                          "isLoading": false,
                                          "items": Array [],
                                          "key": "observation",
                                          "label": "Select observation",
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                        },
                                      ]
                                    }
                                    reset={
                                      Object {
                                        "isDisabled": true,
                                        "onReset": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="box"
                                    >
                                      <div
                                        className="columns"
                                      >
                                        <div
                                          className="column"
                                          key="type"
                                        >
                                          <Dropdown
                                            buttonStyle=""
                                            iconStyle="fa-angle-down"
                                            isActive={false}
                                            isDisabled={false}
                                            isLoading={false}
                                            items={Array []}
                                            label="Select type"
                                            onButtonClick={[Function]}
                                            onItemClick={[Function]}
                                          >
                                            <div
                                              className="dropdown"
                                            >
                                              <div
                                                className="dropdown-trigger"
                                              >
                                                <button
                                                  aria-controls="dropdown-menu"
                                                  aria-haspopup="true"
                                                  className="button"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                >
                                                  <span>
                                                    Select type
                                                  </span>
                                                  <span
                                                    className="icon is-small"
                                                  >
                                                    <i
                                                      aria-hidden="true"
                                                      className="fas fa-angle-down"
                                                    />
                                                  </span>
                                                </button>
                                              </div>
                                              <div
                                                className="dropdown-menu"
                                                id="dropdown-menu"
                                                role="menu"
                                              >
                                                <div
                                                  className="dropdown-content"
                                                />
                                              </div>
                                            </div>
                                          </Dropdown>
                                        </div>
                                        <div
                                          className="column"
                                          key="observation"
                                        >
                                          <Dropdown
                                            buttonStyle=""
                                            iconStyle="fa-angle-down"
                                            isActive={false}
                                            isDisabled={true}
                                            isLoading={false}
                                            items={Array []}
                                            label="Select observation"
                                            onButtonClick={[Function]}
                                            onItemClick={[Function]}
                                          >
                                            <div
                                              className="dropdown"
                                            >
                                              <div
                                                className="dropdown-trigger"
                                              >
                                                <button
                                                  aria-controls="dropdown-menu"
                                                  aria-haspopup="true"
                                                  className="button"
                                                  disabled={true}
                                                  onClick={[Function]}
                                                >
                                                  <span>
                                                    Select observation
                                                  </span>
                                                  <span
                                                    className="icon is-small"
                                                  >
                                                    <i
                                                      aria-hidden="true"
                                                      className="fas fa-angle-down"
                                                    />
                                                  </span>
                                                </button>
                                              </div>
                                              <div
                                                className="dropdown-menu"
                                                id="dropdown-menu"
                                                role="menu"
                                              >
                                                <div
                                                  className="dropdown-content"
                                                />
                                              </div>
                                            </div>
                                          </Dropdown>
                                        </div>
                                        <div
                                          className="column is-2"
                                        >
                                          <button
                                            className="button is-warning is-fullwidth"
                                            disabled={true}
                                            onClick={[Function]}
                                          >
                                            <span>
                                              Reset
                                            </span>
                                            <span
                                              className="icon is-small"
                                            >
                                              <i
                                                aria-hidden="true"
                                                className="fas fa-eraser"
                                              />
                                            </span>
                                          </button>
                                        </div>
                                      </div>
                                    </div>
                                  </ParamsPanel>
                                </StatsParamsPanel>
                              </ResetOnUnmount>
                            </Connect(ResetOnUnmount)>
                          </Connect(Connect(ResetOnUnmount))>
                          <Connect(Charts)
                            chartType="BARCHART"
                          >
                            <Charts
                              chartType="BARCHART"
                              dispatch={[Function]}
                              isLoading={false}
                              items={Array []}
                            />
                          </Connect(Charts)>
                        </div>
                        <div
                          className="column is-one-quarter"
                        >
                          <Connect(Connect(ResetOnUnmount))
                            onFiltersSelected={[Function]}
                          >
                            <Connect(ResetOnUnmount)
                              addCustomTimePeriodFilter={[Function]}
                              addFilterType={[Function]}
                              addThingFilter={[Function]}
                              addTimePeriodFilter={[Function]}
                              dateFilter={
                                Object {
                                  "custom": Object {
                                    "endDate": null,
                                    "startDate": null,
                                  },
                                  "isCustomSelected": false,
                                  "timePeriod": Object {
                                    "isActive": false,
                                    "isDisabled": false,
                                    "isLoading": false,
                                    "items": Array [],
                                    "selectedItem": null,
                                  },
                                }
                              }
                              deleteFilterType={[Function]}
                              onFiltersSelected={[Function]}
                              selectFilterType={[Function]}
                              selectThingFilter={[Function]}
                              selectTimePeriod={[Function]}
                              selectedFilters={Array []}
                              thingFilter={
                                Object {
                                  "isActive": false,
                                  "isDisabled": false,
                                  "isLoading": false,
                                  "items": Array [],
                                  "selectedItem": null,
                                }
                              }
                              toggleDateFilterType={[Function]}
                              type={
                                Object {
                                  "isActive": false,
                                  "isDisabled": false,
                                  "items": Array [
                                    "thing",
                                    "date",
                                  ],
                                }
                              }
                              updateEndDate={[Function]}
                              updateStartDate={[Function]}
                              updateThingFilter={[Function]}
                              updateTimePeriod={[Function]}
                            >
                              <ResetOnUnmount
                                addCustomTimePeriodFilter={[Function]}
                                addFilterType={[Function]}
                                addThingFilter={[Function]}
                                addTimePeriodFilter={[Function]}
                                dateFilter={
                                  Object {
                                    "custom": Object {
                                      "endDate": null,
                                      "startDate": null,
                                    },
                                    "isCustomSelected": false,
                                    "timePeriod": Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    },
                                  }
                                }
                                deleteFilterType={[Function]}
                                onFiltersSelected={[Function]}
                                reset={[Function]}
                                selectFilterType={[Function]}
                                selectThingFilter={[Function]}
                                selectTimePeriod={[Function]}
                                selectedFilters={Array []}
                                thingFilter={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": false,
                                    "isLoading": false,
                                    "items": Array [],
                                    "selectedItem": null,
                                  }
                                }
                                toggleDateFilterType={[Function]}
                                type={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": false,
                                    "items": Array [
                                      "thing",
                                      "date",
                                    ],
                                  }
                                }
                                updateEndDate={[Function]}
                                updateStartDate={[Function]}
                                updateThingFilter={[Function]}
                                updateTimePeriod={[Function]}
                              >
                                <StatsFiltersPanel
                                  addCustomTimePeriodFilter={[Function]}
                                  addFilterType={[Function]}
                                  addThingFilter={[Function]}
                                  addTimePeriodFilter={[Function]}
                                  dateFilter={
                                    Object {
                                      "custom": Object {
                                        "endDate": null,
                                        "startDate": null,
                                      },
                                      "isCustomSelected": false,
                                      "timePeriod": Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "items": Array [],
                                        "selectedItem": null,
                                      },
                                    }
                                  }
                                  deleteFilterType={[Function]}
                                  onFiltersSelected={[Function]}
                                  reset={[Function]}
                                  selectFilterType={[Function]}
                                  selectThingFilter={[Function]}
                                  selectTimePeriod={[Function]}
                                  selectedFilters={Array []}
                                  statsType={null}
                                  thingFilter={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    }
                                  }
                                  toggleDateFilterType={[Function]}
                                  type={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "items": Array [
                                        "thing",
                                        "date",
                                      ],
                                    }
                                  }
                                  updateEndDate={[Function]}
                                  updateStartDate={[Function]}
                                  updateThingFilter={[Function]}
                                  updateTimePeriod={[Function]}
                                >
                                  <FiltersPanel
                                    dateFilter={
                                      Object {
                                        "custom": Object {
                                          "endDate": Object {
                                            "onChange": [Function],
                                            "selected": null,
                                          },
                                          "startDate": Object {
                                            "onChange": [Function],
                                            "selected": null,
                                          },
                                        },
                                        "isCustomSelected": false,
                                        "onDelete": [Function],
                                        "selector": Object {
                                          "isCustomSelected": false,
                                          "onChange": [Function],
                                        },
                                        "timePeriod": Object {
                                          "isActive": false,
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "items": Array [],
                                          "label": "Select Time Period:",
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                          "selectedItem": null,
                                        },
                                      }
                                    }
                                    selectedFilters={Array []}
                                    thingFilter={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "items": Array [],
                                        "label": "Select Thing: ",
                                        "onButtonClick": [Function],
                                        "onDelete": [Function],
                                        "onItemClick": [Function],
                                        "selectedItem": null,
                                      }
                                    }
                                    type={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "items": Array [
                                          "thing",
                                          "date",
                                        ],
                                        "onButtonClick": [Function],
                                        "onItemClick": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="box"
                                    >
                                      <div
                                        className="columns"
                                      >
                                        <div
                                          className="column"
                                        >
                                          <Dropdown
                                            buttonStyle="is-primary"
                                            iconStyle="fa-plus"
                                            isActive={false}
                                            isDisabled={false}
                                            isLoading={false}
                                            items={
                                              Array [
                                                "thing",
                                                "date",
                                              ]
                                            }
                                            label="Filters"
                                            onButtonClick={[Function]}
                                            onItemClick={[Function]}
                                          >
                                            <div
                                              className="dropdown"
                                            >
                                              <div
                                                className="dropdown-trigger"
                                              >
                                                <button
                                                  aria-controls="dropdown-menu"
                                                  aria-haspopup="true"
                                                  className="button is-primary"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                >
                                                  <span>
                                                    Filters
                                                  </span>
                                                  <span
                                                    className="icon is-small"
                                                  >
                                                    <i
                                                      aria-hidden="true"
                                                      className="fas fa-plus"
                                                    />
                                                  </span>
                                                </button>
                                              </div>
                                              <div
                                                className="dropdown-menu"
                                                id="dropdown-menu"
                                                role="menu"
                                              >
                                                <div
                                                  className="dropdown-content"
                                                >
                                                  <div
                                                    className="dropdown-item"
                                                    key="thing"
                                                    onClick={[Function]}
                                                    onKeyPress={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    thing
                                                  </div>
                                                  <div
                                                    className="dropdown-item"
                                                    key="date"
                                                    onClick={[Function]}
                                                    onKeyPress={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    date
                                                  </div>
                                                </div>
                                              </div>
                                            </div>
                                          </Dropdown>
                                        </div>
                                      </div>
                                    </div>
                                  </FiltersPanel>
                                </StatsFiltersPanel>
                              </ResetOnUnmount>
                            </Connect(ResetOnUnmount)>
                          </Connect(Connect(ResetOnUnmount))>
                        </div>
                      </div>
                    </div>
                  </Stats>
                </ResetOnUnmount>
              </Connect(ResetOnUnmount)>
            </DataParams>
          </Connect(DataParams)>
        </Route>
      </withRouter(Connect(DataParams))>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`containers/stats renders when loading stats 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <withRouter(Connect(DataParams))>
        <Route>
          <Connect(DataParams)
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
          >
            <DataParams
              addCustomTimePeriodFilter={[Function]}
              addThingFilter={[Function]}
              addTimePeriodFilter={[Function]}
              hasError={false}
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              updateParams={[Function]}
            >
              <Connect(ResetOnUnmount)
                addCustomTimePeriodFilter={[Function]}
                addThingFilter={[Function]}
                addTimePeriodFilter={[Function]}
                hasError={false}
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                location={
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  }
                }
                match={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
                onFiltersSelected={[Function]}
                onParamsSelected={[Function]}
                onReset={[Function]}
                updateParams={[Function]}
              >
                <ResetOnUnmount
                  addCustomTimePeriodFilter={[Function]}
                  addThingFilter={[Function]}
                  addTimePeriodFilter={[Function]}
                  hasError={false}
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  onFiltersSelected={[Function]}
                  onParamsSelected={[Function]}
                  onReset={[Function]}
                  reset={[Function]}
                  updateParams={[Function]}
                >
                  <Stats
                    addCustomTimePeriodFilter={[Function]}
                    addThingFilter={[Function]}
                    addTimePeriodFilter={[Function]}
                    hasError={false}
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    match={
                      Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                    onFiltersSelected={[Function]}
                    onParamsSelected={[Function]}
                    onReset={[Function]}
                    reset={[Function]}
                    updateParams={[Function]}
                  >
                    <div
                      className="container is-fluid section"
                    >
                      <div
                        className="columns"
                      >
                        <div
                          className="column is-three-quarters"
                        >
                          <Connect(Connect(ResetOnUnmount))
                            onParamsSelected={[Function]}
                            onReset={[Function]}
                          >
                            <Connect(ResetOnUnmount)
                              isResetDisabled={true}
                              observation={Object {}}
                              onParamsSelected={[Function]}
                              onReset={[Function]}
                              selectObservation={[Function]}
                              selectType={[Function]}
                              type={Object {}}
                              updateObservation={[Function]}
                              updateParams={[Function]}
                              updateType={[Function]}
                            >
                              <ResetOnUnmount
                                isResetDisabled={true}
                                observation={Object {}}
                                onParamsSelected={[Function]}
                                onReset={[Function]}
                                reset={[Function]}
                                selectObservation={[Function]}
                                selectType={[Function]}
                                type={Object {}}
                                updateObservation={[Function]}
                                updateParams={[Function]}
                                updateType={[Function]}
                              >
                                <StatsParamsPanel
                                  isResetDisabled={true}
                                  observation={Object {}}
                                  onParamsSelected={[Function]}
                                  onReset={[Function]}
                                  reset={[Function]}
                                  selectObservation={[Function]}
                                  selectType={[Function]}
                                  type={Object {}}
                                  updateObservation={[Function]}
                                  updateParams={[Function]}
                                  updateType={[Function]}
                                >
                                  <ParamsPanel
                                    params={
                                      Array [
                                        Object {
                                          "isActive": false,
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "items": Array [],
                                          "key": "type",
                                          "label": "Select type",
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                        },
                                        Object {
                                          "isActive": false,
                                          "isDisabled": true,
                                          "isLoading": false,
                                          "items": Array [],
                                          "key": "observation",
                                          "label": "Select observation",
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                        },
                                      ]
                                    }
                                    reset={
                                      Object {
                                        "isDisabled": true,
                                        "onReset": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="box"
                                    >
                                      <div
                                        className="columns"
                                      >
                                        <div
                                          className="column"
                                          key="type"
                                        >
                                          <Dropdown
                                            buttonStyle=""
                                            iconStyle="fa-angle-down"
                                            isActive={false}
                                            isDisabled={false}
                                            isLoading={false}
                                            items={Array []}
                                            label="Select type"
                                            onButtonClick={[Function]}
                                            onItemClick={[Function]}
                                          >
                                            <div
                                              className="dropdown"
                                            >
                                              <div
                                                className="dropdown-trigger"
                                              >
                                                <button
                                                  aria-controls="dropdown-menu"
                                                  aria-haspopup="true"
                                                  className="button"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                >
                                                  <span>
                                                    Select type
                                                  </span>
                                                  <span
                                                    className="icon is-small"
                                                  >
                                                    <i
                                                      aria-hidden="true"
                                                      className="fas fa-angle-down"
                                                    />
                                                  </span>
                                                </button>
                                              </div>
                                              <div
                                                className="dropdown-menu"
                                                id="dropdown-menu"
                                                role="menu"
                                              >
                                                <div
                                                  className="dropdown-content"
                                                />
                                              </div>
                                            </div>
                                          </Dropdown>
                                        </div>
                                        <div
                                          className="column"
                                          key="observation"
                                        >
                                          <Dropdown
                                            buttonStyle=""
                                            iconStyle="fa-angle-down"
                                            isActive={false}
                                            isDisabled={true}
                                            isLoading={false}
                                            items={Array []}
                                            label="Select observation"
                                            onButtonClick={[Function]}
                                            onItemClick={[Function]}
                                          >
                                            <div
                                              className="dropdown"
                                            >
                                              <div
                                                className="dropdown-trigger"
                                              >
                                                <button
                                                  aria-controls="dropdown-menu"
                                                  aria-haspopup="true"
                                                  className="button"
                                                  disabled={true}
                                                  onClick={[Function]}
                                                >
                                                  <span>
                                                    Select observation
                                                  </span>
                                                  <span
                                                    className="icon is-small"
                                                  >
                                                    <i
                                                      aria-hidden="true"
                                                      className="fas fa-angle-down"
                                                    />
                                                  </span>
                                                </button>
                                              </div>
                                              <div
                                                className="dropdown-menu"
                                                id="dropdown-menu"
                                                role="menu"
                                              >
                                                <div
                                                  className="dropdown-content"
                                                />
                                              </div>
                                            </div>
                                          </Dropdown>
                                        </div>
                                        <div
                                          className="column is-2"
                                        >
                                          <button
                                            className="button is-warning is-fullwidth"
                                            disabled={true}
                                            onClick={[Function]}
                                          >
                                            <span>
                                              Reset
                                            </span>
                                            <span
                                              className="icon is-small"
                                            >
                                              <i
                                                aria-hidden="true"
                                                className="fas fa-eraser"
                                              />
                                            </span>
                                          </button>
                                        </div>
                                      </div>
                                    </div>
                                  </ParamsPanel>
                                </StatsParamsPanel>
                              </ResetOnUnmount>
                            </Connect(ResetOnUnmount)>
                          </Connect(Connect(ResetOnUnmount))>
                          <Connect(Charts)
                            chartType="BARCHART"
                          >
                            <Charts
                              chartType="BARCHART"
                              dispatch={[Function]}
                              isLoading={false}
                              items={Array []}
                            />
                          </Connect(Charts)>
                        </div>
                        <div
                          className="column is-one-quarter"
                        >
                          <Connect(Connect(ResetOnUnmount))
                            onFiltersSelected={[Function]}
                          >
                            <Connect(ResetOnUnmount)
                              addCustomTimePeriodFilter={[Function]}
                              addFilterType={[Function]}
                              addThingFilter={[Function]}
                              addTimePeriodFilter={[Function]}
                              dateFilter={
                                Object {
                                  "custom": Object {
                                    "endDate": null,
                                    "startDate": null,
                                  },
                                  "isCustomSelected": false,
                                  "timePeriod": Object {
                                    "isActive": false,
                                    "isDisabled": false,
                                    "isLoading": false,
                                    "items": Array [],
                                    "selectedItem": null,
                                  },
                                }
                              }
                              deleteFilterType={[Function]}
                              onFiltersSelected={[Function]}
                              selectFilterType={[Function]}
                              selectThingFilter={[Function]}
                              selectTimePeriod={[Function]}
                              selectedFilters={Array []}
                              thingFilter={
                                Object {
                                  "isActive": false,
                                  "isDisabled": false,
                                  "isLoading": false,
                                  "items": Array [],
                                  "selectedItem": null,
                                }
                              }
                              toggleDateFilterType={[Function]}
                              type={
                                Object {
                                  "isActive": false,
                                  "isDisabled": false,
                                  "items": Array [
                                    "thing",
                                    "date",
                                  ],
                                }
                              }
                              updateEndDate={[Function]}
                              updateStartDate={[Function]}
                              updateThingFilter={[Function]}
                              updateTimePeriod={[Function]}
                            >
                              <ResetOnUnmount
                                addCustomTimePeriodFilter={[Function]}
                                addFilterType={[Function]}
                                addThingFilter={[Function]}
                                addTimePeriodFilter={[Function]}
                                dateFilter={
                                  Object {
                                    "custom": Object {
                                      "endDate": null,
                                      "startDate": null,
                                    },
                                    "isCustomSelected": false,
                                    "timePeriod": Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    },
                                  }
                                }
                                deleteFilterType={[Function]}
                                onFiltersSelected={[Function]}
                                reset={[Function]}
                                selectFilterType={[Function]}
                                selectThingFilter={[Function]}
                                selectTimePeriod={[Function]}
                                selectedFilters={Array []}
                                thingFilter={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": false,
                                    "isLoading": false,
                                    "items": Array [],
                                    "selectedItem": null,
                                  }
                                }
                                toggleDateFilterType={[Function]}
                                type={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": false,
                                    "items": Array [
                                      "thing",
                                      "date",
                                    ],
                                  }
                                }
                                updateEndDate={[Function]}
                                updateStartDate={[Function]}
                                updateThingFilter={[Function]}
                                updateTimePeriod={[Function]}
                              >
                                <StatsFiltersPanel
                                  addCustomTimePeriodFilter={[Function]}
                                  addFilterType={[Function]}
                                  addThingFilter={[Function]}
                                  addTimePeriodFilter={[Function]}
                                  dateFilter={
                                    Object {
                                      "custom": Object {
                                        "endDate": null,
                                        "startDate": null,
                                      },
                                      "isCustomSelected": false,
                                      "timePeriod": Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "items": Array [],
                                        "selectedItem": null,
                                      },
                                    }
                                  }
                                  deleteFilterType={[Function]}
                                  onFiltersSelected={[Function]}
                                  reset={[Function]}
                                  selectFilterType={[Function]}
                                  selectThingFilter={[Function]}
                                  selectTimePeriod={[Function]}
                                  selectedFilters={Array []}
                                  statsType={null}
                                  thingFilter={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    }
                                  }
                                  toggleDateFilterType={[Function]}
                                  type={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "items": Array [
                                        "thing",
                                        "date",
                                      ],
                                    }
                                  }
                                  updateEndDate={[Function]}
                                  updateStartDate={[Function]}
                                  updateThingFilter={[Function]}
                                  updateTimePeriod={[Function]}
                                >
                                  <FiltersPanel
                                    dateFilter={
                                      Object {
                                        "custom": Object {
                                          "endDate": Object {
                                            "onChange": [Function],
                                            "selected": null,
                                          },
                                          "startDate": Object {
                                            "onChange": [Function],
                                            "selected": null,
                                          },
                                        },
                                        "isCustomSelected": false,
                                        "onDelete": [Function],
                                        "selector": Object {
                                          "isCustomSelected": false,
                                          "onChange": [Function],
                                        },
                                        "timePeriod": Object {
                                          "isActive": false,
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "items": Array [],
                                          "label": "Select Time Period:",
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                          "selectedItem": null,
                                        },
                                      }
                                    }
                                    selectedFilters={Array []}
                                    thingFilter={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "items": Array [],
                                        "label": "Select Thing: ",
                                        "onButtonClick": [Function],
                                        "onDelete": [Function],
                                        "onItemClick": [Function],
                                        "selectedItem": null,
                                      }
                                    }
                                    type={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "items": Array [
                                          "thing",
                                          "date",
                                        ],
                                        "onButtonClick": [Function],
                                        "onItemClick": [Function],
                                      }
                                    }
                                  >
                                    <div
                                      className="box"
                                    >
                                      <div
                                        className="columns"
                                      >
                                        <div
                                          className="column"
                                        >
                                          <Dropdown
                                            buttonStyle="is-primary"
                                            iconStyle="fa-plus"
                                            isActive={false}
                                            isDisabled={false}
                                            isLoading={false}
                                            items={
                                              Array [
                                                "thing",
                                                "date",
                                              ]
                                            }
                                            label="Filters"
                                            onButtonClick={[Function]}
                                            onItemClick={[Function]}
                                          >
                                            <div
                                              className="dropdown"
                                            >
                                              <div
                                                className="dropdown-trigger"
                                              >
                                                <button
                                                  aria-controls="dropdown-menu"
                                                  aria-haspopup="true"
                                                  className="button is-primary"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                >
                                                  <span>
                                                    Filters
                                                  </span>
                                                  <span
                                                    className="icon is-small"
                                                  >
                                                    <i
                                                      aria-hidden="true"
                                                      className="fas fa-plus"
                                                    />
                                                  </span>
                                                </button>
                                              </div>
                                              <div
                                                className="dropdown-menu"
                                                id="dropdown-menu"
                                                role="menu"
                                              >
                                                <div
                                                  className="dropdown-content"
                                                >
                                                  <div
                                                    className="dropdown-item"
                                                    key="thing"
                                                    onClick={[Function]}
                                                    onKeyPress={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    thing
                                                  </div>
                                                  <div
                                                    className="dropdown-item"
                                                    key="date"
                                                    onClick={[Function]}
                                                    onKeyPress={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    date
                                                  </div>
                                                </div>
                                              </div>
                                            </div>
                                          </Dropdown>
                                        </div>
                                      </div>
                                    </div>
                                  </FiltersPanel>
                                </StatsFiltersPanel>
                              </ResetOnUnmount>
                            </Connect(ResetOnUnmount)>
                          </Connect(Connect(ResetOnUnmount))>
                        </div>
                      </div>
                    </div>
                  </Stats>
                </ResetOnUnmount>
              </Connect(ResetOnUnmount)>
            </DataParams>
          </Connect(DataParams)>
        </Route>
      </withRouter(Connect(DataParams))>
    </Provider>
  </Router>
</MemoryRouter>
`;
