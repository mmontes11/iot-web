// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`containers/stats renders stats barcharts 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Connect(withRouter(Connect(ResetOnUnmount)))>
        <withRouter(Connect(ResetOnUnmount))
          getStats={[Function]}
          isLoading={false}
          reset={[Function]}
          stats={
            Array [
              Object {
                "data": Array [
                  Object {
                    "name": "min",
                    "value": 10,
                  },
                  Object {
                    "name": "avg",
                    "value": 20,
                  },
                  Object {
                    "name": "max",
                    "value": 30,
                  },
                ],
                "title": Object {
                  "thing": "thing",
                  "type": "measurement",
                  "unit": Object {
                    "symbol": "ºC",
                  },
                },
              },
              Object {
                "data": Array [
                  Object {
                    "name": "min",
                    "value": 10,
                  },
                  Object {
                    "name": "avg",
                    "value": 20,
                  },
                  Object {
                    "name": "max",
                    "value": 30,
                  },
                ],
                "title": Object {
                  "thing": "thing",
                  "type": "event",
                },
              },
            ]
          }
        >
          <Route>
            <Connect(ResetOnUnmount)
              getStats={[Function]}
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              isLoading={false}
              location={
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              reset={[Function]}
              stats={
                Array [
                  Object {
                    "data": Array [
                      Object {
                        "name": "min",
                        "value": 10,
                      },
                      Object {
                        "name": "avg",
                        "value": 20,
                      },
                      Object {
                        "name": "max",
                        "value": 30,
                      },
                    ],
                    "title": Object {
                      "thing": "thing",
                      "type": "measurement",
                      "unit": Object {
                        "symbol": "ºC",
                      },
                    },
                  },
                  Object {
                    "data": Array [
                      Object {
                        "name": "min",
                        "value": 10,
                      },
                      Object {
                        "name": "avg",
                        "value": 20,
                      },
                      Object {
                        "name": "max",
                        "value": 30,
                      },
                    ],
                    "title": Object {
                      "thing": "thing",
                      "type": "event",
                    },
                  },
                ]
              }
            >
              <ResetOnUnmount
                getStats={[Function]}
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                isLoading={false}
                location={
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  }
                }
                match={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
                reset={[Function]}
                stats={
                  Array [
                    Object {
                      "data": Array [
                        Object {
                          "name": "min",
                          "value": 10,
                        },
                        Object {
                          "name": "avg",
                          "value": 20,
                        },
                        Object {
                          "name": "max",
                          "value": 30,
                        },
                      ],
                      "title": Object {
                        "thing": "thing",
                        "type": "measurement",
                        "unit": Object {
                          "symbol": "ºC",
                        },
                      },
                    },
                    Object {
                      "data": Array [
                        Object {
                          "name": "min",
                          "value": 10,
                        },
                        Object {
                          "name": "avg",
                          "value": 20,
                        },
                        Object {
                          "name": "max",
                          "value": 30,
                        },
                      ],
                      "title": Object {
                        "thing": "thing",
                        "type": "event",
                      },
                    },
                  ]
                }
              >
                <Stats
                  getStats={[Function]}
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  isLoading={false}
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  reset={[Function]}
                  stats={
                    Array [
                      Object {
                        "data": Array [
                          Object {
                            "name": "min",
                            "value": 10,
                          },
                          Object {
                            "name": "avg",
                            "value": 20,
                          },
                          Object {
                            "name": "max",
                            "value": 30,
                          },
                        ],
                        "title": Object {
                          "thing": "thing",
                          "type": "measurement",
                          "unit": Object {
                            "symbol": "ºC",
                          },
                        },
                      },
                      Object {
                        "data": Array [
                          Object {
                            "name": "min",
                            "value": 10,
                          },
                          Object {
                            "name": "avg",
                            "value": 20,
                          },
                          Object {
                            "name": "max",
                            "value": 30,
                          },
                        ],
                        "title": Object {
                          "thing": "thing",
                          "type": "event",
                        },
                      },
                    ]
                  }
                >
                  <div
                    className="container is-fluid section"
                  >
                    <div
                      className="columns"
                    >
                      <div
                        className="column is-three-quarters"
                      >
                        <Connect(withRouter(Connect(ResetOnUnmount)))
                          onParamsSelected={[Function]}
                          onReset={[Function]}
                        >
                          <withRouter(Connect(ResetOnUnmount))
                            isResetDisabled={true}
                            observation={
                              Object {
                                "isActive": false,
                                "isDisabled": true,
                                "isLoading": false,
                                "items": Array [],
                                "selectedItem": null,
                              }
                            }
                            onParamsSelected={[Function]}
                            onReset={[Function]}
                            selectObservation={[Function]}
                            selectType={[Function]}
                            type={
                              Object {
                                "isActive": false,
                                "items": Array [
                                  "event",
                                  "measurement",
                                ],
                                "selectedItem": null,
                              }
                            }
                            updateObservation={[Function]}
                            updateType={[Function]}
                          >
                            <Route>
                              <Connect(ResetOnUnmount)
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                isResetDisabled={true}
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/",
                                    "url": "/",
                                  }
                                }
                                observation={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": true,
                                    "isLoading": false,
                                    "items": Array [],
                                    "selectedItem": null,
                                  }
                                }
                                onParamsSelected={[Function]}
                                onReset={[Function]}
                                selectObservation={[Function]}
                                selectType={[Function]}
                                type={
                                  Object {
                                    "isActive": false,
                                    "items": Array [
                                      "event",
                                      "measurement",
                                    ],
                                    "selectedItem": null,
                                  }
                                }
                                updateObservation={[Function]}
                                updateType={[Function]}
                              >
                                <ResetOnUnmount
                                  history={
                                    Object {
                                      "action": "POP",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  isResetDisabled={true}
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/",
                                      "url": "/",
                                    }
                                  }
                                  observation={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": true,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    }
                                  }
                                  onParamsSelected={[Function]}
                                  onReset={[Function]}
                                  reset={[Function]}
                                  selectObservation={[Function]}
                                  selectType={[Function]}
                                  type={
                                    Object {
                                      "isActive": false,
                                      "items": Array [
                                        "event",
                                        "measurement",
                                      ],
                                      "selectedItem": null,
                                    }
                                  }
                                  updateObservation={[Function]}
                                  updateType={[Function]}
                                >
                                  <StatsParamsPanel
                                    history={
                                      Object {
                                        "action": "POP",
                                        "block": [Function],
                                        "canGo": [Function],
                                        "createHref": [Function],
                                        "entries": Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/",
                                            "search": "",
                                            "state": undefined,
                                          },
                                        ],
                                        "go": [Function],
                                        "goBack": [Function],
                                        "goForward": [Function],
                                        "index": 0,
                                        "length": 1,
                                        "listen": [Function],
                                        "location": Object {
                                          "hash": "",
                                          "pathname": "/",
                                          "search": "",
                                          "state": undefined,
                                        },
                                        "push": [Function],
                                        "replace": [Function],
                                      }
                                    }
                                    isResetDisabled={true}
                                    location={
                                      Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      }
                                    }
                                    match={
                                      Object {
                                        "isExact": true,
                                        "params": Object {},
                                        "path": "/",
                                        "url": "/",
                                      }
                                    }
                                    observation={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": true,
                                        "isLoading": false,
                                        "items": Array [],
                                        "selectedItem": null,
                                      }
                                    }
                                    onParamsSelected={[Function]}
                                    onReset={[Function]}
                                    reset={[Function]}
                                    selectObservation={[Function]}
                                    selectType={[Function]}
                                    type={
                                      Object {
                                        "isActive": false,
                                        "items": Array [
                                          "event",
                                          "measurement",
                                        ],
                                        "selectedItem": null,
                                      }
                                    }
                                    updateObservation={[Function]}
                                    updateType={[Function]}
                                  >
                                    <ParamsPanel
                                      observation={
                                        Object {
                                          "isActive": false,
                                          "isDisabled": true,
                                          "isLoading": false,
                                          "items": Array [],
                                          "label": "Select observation",
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                          "selectedItem": null,
                                        }
                                      }
                                      reset={
                                        Object {
                                          "isDisabled": true,
                                          "onReset": [Function],
                                        }
                                      }
                                      type={
                                        Object {
                                          "isActive": false,
                                          "items": Array [
                                            "event",
                                            "measurement",
                                          ],
                                          "label": "Select type",
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                          "selectedItem": null,
                                        }
                                      }
                                    >
                                      <div
                                        className="box"
                                      >
                                        <div
                                          className="columns"
                                        >
                                          <div
                                            className="column is-5"
                                          >
                                            <Dropdown
                                              buttonStyle=""
                                              iconStyle="fa-angle-down"
                                              isActive={false}
                                              isDisabled={false}
                                              isLoading={false}
                                              items={
                                                Array [
                                                  "event",
                                                  "measurement",
                                                ]
                                              }
                                              label="Select type"
                                              onButtonClick={[Function]}
                                              onItemClick={[Function]}
                                              selectedItem={null}
                                            >
                                              <div
                                                className="dropdown"
                                              >
                                                <div
                                                  className="dropdown-trigger"
                                                >
                                                  <button
                                                    aria-controls="dropdown-menu"
                                                    aria-haspopup="true"
                                                    className="button"
                                                    disabled={false}
                                                    onClick={[Function]}
                                                  >
                                                    <span>
                                                      Select type
                                                    </span>
                                                    <span
                                                      className="icon is-small"
                                                    >
                                                      <i
                                                        aria-hidden="true"
                                                        className="fas fa-angle-down"
                                                      />
                                                    </span>
                                                  </button>
                                                </div>
                                                <div
                                                  className="dropdown-menu"
                                                  id="dropdown-menu"
                                                  role="menu"
                                                >
                                                  <div
                                                    className="dropdown-content"
                                                  >
                                                    <div
                                                      className="dropdown-item"
                                                      key="ZXZlbnQ="
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      event
                                                    </div>
                                                    <div
                                                      className="dropdown-item"
                                                      key="bWVhc3VyZW1lbnQ="
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      measurement
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                            </Dropdown>
                                          </div>
                                          <div
                                            className="column is-5"
                                          >
                                            <Dropdown
                                              buttonStyle=""
                                              iconStyle="fa-angle-down"
                                              isActive={false}
                                              isDisabled={true}
                                              isLoading={false}
                                              items={Array []}
                                              label="Select observation"
                                              onButtonClick={[Function]}
                                              onItemClick={[Function]}
                                              selectedItem={null}
                                            >
                                              <div
                                                className="dropdown"
                                              >
                                                <div
                                                  className="dropdown-trigger"
                                                >
                                                  <button
                                                    aria-controls="dropdown-menu"
                                                    aria-haspopup="true"
                                                    className="button"
                                                    disabled={true}
                                                    onClick={[Function]}
                                                  >
                                                    <span>
                                                      Select observation
                                                    </span>
                                                    <span
                                                      className="icon is-small"
                                                    >
                                                      <i
                                                        aria-hidden="true"
                                                        className="fas fa-angle-down"
                                                      />
                                                    </span>
                                                  </button>
                                                </div>
                                                <div
                                                  className="dropdown-menu"
                                                  id="dropdown-menu"
                                                  role="menu"
                                                >
                                                  <div
                                                    className="dropdown-content"
                                                  />
                                                </div>
                                              </div>
                                            </Dropdown>
                                          </div>
                                          <div
                                            className="column"
                                          >
                                            <button
                                              className="button is-warning is-fullwidth"
                                              disabled={true}
                                              onClick={[Function]}
                                            >
                                              <span>
                                                Reset
                                              </span>
                                              <span
                                                className="icon is-small"
                                              >
                                                <i
                                                  aria-hidden="true"
                                                  className="fas fa-eraser"
                                                />
                                              </span>
                                            </button>
                                          </div>
                                        </div>
                                      </div>
                                    </ParamsPanel>
                                  </StatsParamsPanel>
                                </ResetOnUnmount>
                              </Connect(ResetOnUnmount)>
                            </Route>
                          </withRouter(Connect(ResetOnUnmount))>
                        </Connect(withRouter(Connect(ResetOnUnmount)))>
                        <BarChart
                          key="bWVhc3VyZW1lbnQtdGhpbmc="
                          stats={
                            Object {
                              "data": Array [
                                Object {
                                  "name": "min",
                                  "value": 10,
                                },
                                Object {
                                  "name": "avg",
                                  "value": 20,
                                },
                                Object {
                                  "name": "max",
                                  "value": 30,
                                },
                              ],
                              "title": Object {
                                "thing": "thing",
                                "type": "measurement",
                                "unit": Object {
                                  "symbol": "ºC",
                                },
                              },
                            }
                          }
                        >
                          <div
                            className="box"
                          >
                            <div
                              className="columns"
                            >
                              <div
                                className="column"
                              >
                                <p
                                  className="title is-3 has-text-primary has-text-centered is-spaced"
                                >
                                  measurement stats of thing (ºC)
                                </p>
                                <div
                                  className="barchart"
                                >
                                  <ResponsiveContainer
                                    debounce={0}
                                    height="100%"
                                    width="100%"
                                  >
                                    <div
                                      className="recharts-responsive-container"
                                      style={
                                        Object {
                                          "height": "100%",
                                          "maxHeight": undefined,
                                          "minHeight": undefined,
                                          "minWidth": undefined,
                                          "width": "100%",
                                        }
                                      }
                                    >
                                      <BarChart
                                        barCategoryGap="10%"
                                        barGap={4}
                                        data={
                                          Array [
                                            Object {
                                              "name": "min",
                                              "value": 10,
                                            },
                                            Object {
                                              "name": "avg",
                                              "value": 20,
                                            },
                                            Object {
                                              "name": "max",
                                              "value": 30,
                                            },
                                          ]
                                        }
                                        height={0}
                                        layout="horizontal"
                                        margin={
                                          Object {
                                            "bottom": 5,
                                            "left": 5,
                                            "right": 5,
                                            "top": 5,
                                          }
                                        }
                                        reverseStackOrder={false}
                                        stackOffset="none"
                                        width={0}
                                      />
                                      <ResizeDetector
                                        handleHeight={true}
                                        handleWidth={true}
                                        onResize={[Function]}
                                        refreshRate={1000}
                                        resizableElementId=""
                                        skipOnMount={false}
                                      >
                                        <div
                                          style={
                                            Object {
                                              "display": "none",
                                              "height": 0,
                                              "position": "absolute",
                                              "visibility": "hidden",
                                              "width": 0,
                                            }
                                          }
                                        />
                                      </ResizeDetector>
                                    </div>
                                  </ResponsiveContainer>
                                </div>
                              </div>
                            </div>
                          </div>
                        </BarChart>
                        <BarChart
                          key="ZXZlbnQtdGhpbmc="
                          stats={
                            Object {
                              "data": Array [
                                Object {
                                  "name": "min",
                                  "value": 10,
                                },
                                Object {
                                  "name": "avg",
                                  "value": 20,
                                },
                                Object {
                                  "name": "max",
                                  "value": 30,
                                },
                              ],
                              "title": Object {
                                "thing": "thing",
                                "type": "event",
                              },
                            }
                          }
                        >
                          <div
                            className="box"
                          >
                            <div
                              className="columns"
                            >
                              <div
                                className="column"
                              >
                                <p
                                  className="title is-3 has-text-primary has-text-centered is-spaced"
                                >
                                  event stats of thing
                                </p>
                                <div
                                  className="barchart"
                                >
                                  <ResponsiveContainer
                                    debounce={0}
                                    height="100%"
                                    width="100%"
                                  >
                                    <div
                                      className="recharts-responsive-container"
                                      style={
                                        Object {
                                          "height": "100%",
                                          "maxHeight": undefined,
                                          "minHeight": undefined,
                                          "minWidth": undefined,
                                          "width": "100%",
                                        }
                                      }
                                    >
                                      <BarChart
                                        barCategoryGap="10%"
                                        barGap={4}
                                        data={
                                          Array [
                                            Object {
                                              "name": "min",
                                              "value": 10,
                                            },
                                            Object {
                                              "name": "avg",
                                              "value": 20,
                                            },
                                            Object {
                                              "name": "max",
                                              "value": 30,
                                            },
                                          ]
                                        }
                                        height={0}
                                        layout="horizontal"
                                        margin={
                                          Object {
                                            "bottom": 5,
                                            "left": 5,
                                            "right": 5,
                                            "top": 5,
                                          }
                                        }
                                        reverseStackOrder={false}
                                        stackOffset="none"
                                        width={0}
                                      />
                                      <ResizeDetector
                                        handleHeight={true}
                                        handleWidth={true}
                                        onResize={[Function]}
                                        refreshRate={1000}
                                        resizableElementId=""
                                        skipOnMount={false}
                                      >
                                        <div
                                          style={
                                            Object {
                                              "display": "none",
                                              "height": 0,
                                              "position": "absolute",
                                              "visibility": "hidden",
                                              "width": 0,
                                            }
                                          }
                                        />
                                      </ResizeDetector>
                                    </div>
                                  </ResponsiveContainer>
                                </div>
                              </div>
                            </div>
                          </div>
                        </BarChart>
                      </div>
                      <div
                        className="column is-one-quarter"
                      >
                        <withRouter(Connect(Connect(ResetOnUnmount)))
                          onFiltersChange={[Function]}
                        >
                          <Route>
                            <Connect(Connect(ResetOnUnmount))
                              history={
                                Object {
                                  "action": "POP",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              match={
                                Object {
                                  "isExact": true,
                                  "params": Object {},
                                  "path": "/",
                                  "url": "/",
                                }
                              }
                              onFiltersChange={[Function]}
                            >
                              <Connect(ResetOnUnmount)
                                addFilterType={[Function]}
                                dateFilter={
                                  Object {
                                    "custom": Object {
                                      "endDate": null,
                                      "startDate": null,
                                    },
                                    "isCustomSelected": false,
                                    "timePeriod": Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    },
                                  }
                                }
                                deleteFilterType={[Function]}
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/",
                                    "url": "/",
                                  }
                                }
                                onFiltersChange={[Function]}
                                selectFilterType={[Function]}
                                selectThingFilter={[Function]}
                                selectTimePeriod={[Function]}
                                selectedFilters={Array []}
                                statsType={null}
                                thingFilter={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": false,
                                    "isLoading": false,
                                    "items": Array [],
                                    "selectedItem": null,
                                  }
                                }
                                toggleDateFilterType={[Function]}
                                type={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": false,
                                    "items": Array [
                                      "date",
                                      "thing",
                                    ],
                                  }
                                }
                                updateEndDate={[Function]}
                                updateStartDate={[Function]}
                                updateThingFilter={[Function]}
                                updateTimePeriod={[Function]}
                              >
                                <ResetOnUnmount
                                  addFilterType={[Function]}
                                  dateFilter={
                                    Object {
                                      "custom": Object {
                                        "endDate": null,
                                        "startDate": null,
                                      },
                                      "isCustomSelected": false,
                                      "timePeriod": Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "items": Array [],
                                        "selectedItem": null,
                                      },
                                    }
                                  }
                                  deleteFilterType={[Function]}
                                  history={
                                    Object {
                                      "action": "POP",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/",
                                      "url": "/",
                                    }
                                  }
                                  onFiltersChange={[Function]}
                                  reset={[Function]}
                                  selectFilterType={[Function]}
                                  selectThingFilter={[Function]}
                                  selectTimePeriod={[Function]}
                                  selectedFilters={Array []}
                                  statsType={null}
                                  thingFilter={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    }
                                  }
                                  toggleDateFilterType={[Function]}
                                  type={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "items": Array [
                                        "date",
                                        "thing",
                                      ],
                                    }
                                  }
                                  updateEndDate={[Function]}
                                  updateStartDate={[Function]}
                                  updateThingFilter={[Function]}
                                  updateTimePeriod={[Function]}
                                >
                                  <StatsFiltersPanel
                                    addFilterType={[Function]}
                                    dateFilter={
                                      Object {
                                        "custom": Object {
                                          "endDate": null,
                                          "startDate": null,
                                        },
                                        "isCustomSelected": false,
                                        "timePeriod": Object {
                                          "isActive": false,
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "items": Array [],
                                          "selectedItem": null,
                                        },
                                      }
                                    }
                                    deleteFilterType={[Function]}
                                    history={
                                      Object {
                                        "action": "POP",
                                        "block": [Function],
                                        "canGo": [Function],
                                        "createHref": [Function],
                                        "entries": Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/",
                                            "search": "",
                                            "state": undefined,
                                          },
                                        ],
                                        "go": [Function],
                                        "goBack": [Function],
                                        "goForward": [Function],
                                        "index": 0,
                                        "length": 1,
                                        "listen": [Function],
                                        "location": Object {
                                          "hash": "",
                                          "pathname": "/",
                                          "search": "",
                                          "state": undefined,
                                        },
                                        "push": [Function],
                                        "replace": [Function],
                                      }
                                    }
                                    location={
                                      Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      }
                                    }
                                    match={
                                      Object {
                                        "isExact": true,
                                        "params": Object {},
                                        "path": "/",
                                        "url": "/",
                                      }
                                    }
                                    onFiltersChange={[Function]}
                                    reset={[Function]}
                                    selectFilterType={[Function]}
                                    selectThingFilter={[Function]}
                                    selectTimePeriod={[Function]}
                                    selectedFilters={Array []}
                                    statsType={null}
                                    thingFilter={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "items": Array [],
                                        "selectedItem": null,
                                      }
                                    }
                                    toggleDateFilterType={[Function]}
                                    type={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "items": Array [
                                          "date",
                                          "thing",
                                        ],
                                      }
                                    }
                                    updateEndDate={[Function]}
                                    updateStartDate={[Function]}
                                    updateThingFilter={[Function]}
                                    updateTimePeriod={[Function]}
                                  >
                                    <FiltersPanel
                                      dateFilter={
                                        Object {
                                          "custom": Object {
                                            "endDate": Object {
                                              "onChange": [Function],
                                              "selected": null,
                                            },
                                            "startDate": Object {
                                              "onChange": [Function],
                                              "selected": null,
                                            },
                                          },
                                          "isCustomSelected": false,
                                          "onDelete": [Function],
                                          "selector": Object {
                                            "isCustomSelected": false,
                                            "onChange": [Function],
                                          },
                                          "timePeriod": Object {
                                            "isActive": false,
                                            "isDisabled": false,
                                            "isLoading": false,
                                            "items": Array [],
                                            "label": "Select Time Period:",
                                            "onButtonClick": [Function],
                                            "onItemClick": [Function],
                                            "selectedItem": null,
                                          },
                                        }
                                      }
                                      selectedFilters={Array []}
                                      thingFilter={
                                        Object {
                                          "isActive": false,
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "items": Array [],
                                          "label": "Select Thing: ",
                                          "onButtonClick": [Function],
                                          "onDelete": [Function],
                                          "onItemClick": [Function],
                                          "selectedItem": null,
                                        }
                                      }
                                      type={
                                        Object {
                                          "isActive": false,
                                          "isDisabled": false,
                                          "items": Array [
                                            "date",
                                            "thing",
                                          ],
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                        }
                                      }
                                    >
                                      <div
                                        className="box"
                                      >
                                        <div
                                          className="columns"
                                        >
                                          <div
                                            className="column"
                                          >
                                            <Dropdown
                                              buttonStyle="is-primary"
                                              iconStyle="fa-plus"
                                              isActive={false}
                                              isDisabled={false}
                                              isLoading={false}
                                              items={
                                                Array [
                                                  "date",
                                                  "thing",
                                                ]
                                              }
                                              label="Filters"
                                              onButtonClick={[Function]}
                                              onItemClick={[Function]}
                                            >
                                              <div
                                                className="dropdown"
                                              >
                                                <div
                                                  className="dropdown-trigger"
                                                >
                                                  <button
                                                    aria-controls="dropdown-menu"
                                                    aria-haspopup="true"
                                                    className="button is-primary"
                                                    disabled={false}
                                                    onClick={[Function]}
                                                  >
                                                    <span>
                                                      Filters
                                                    </span>
                                                    <span
                                                      className="icon is-small"
                                                    >
                                                      <i
                                                        aria-hidden="true"
                                                        className="fas fa-plus"
                                                      />
                                                    </span>
                                                  </button>
                                                </div>
                                                <div
                                                  className="dropdown-menu"
                                                  id="dropdown-menu"
                                                  role="menu"
                                                >
                                                  <div
                                                    className="dropdown-content"
                                                  >
                                                    <div
                                                      className="dropdown-item"
                                                      key="ZGF0ZQ=="
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      date
                                                    </div>
                                                    <div
                                                      className="dropdown-item"
                                                      key="dGhpbmc="
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      thing
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                            </Dropdown>
                                          </div>
                                        </div>
                                      </div>
                                    </FiltersPanel>
                                  </StatsFiltersPanel>
                                </ResetOnUnmount>
                              </Connect(ResetOnUnmount)>
                            </Connect(Connect(ResetOnUnmount))>
                          </Route>
                        </withRouter(Connect(Connect(ResetOnUnmount)))>
                      </div>
                    </div>
                  </div>
                </Stats>
              </ResetOnUnmount>
            </Connect(ResetOnUnmount)>
          </Route>
        </withRouter(Connect(ResetOnUnmount))>
      </Connect(withRouter(Connect(ResetOnUnmount)))>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`containers/stats renders stats in initial state 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Connect(withRouter(Connect(ResetOnUnmount)))>
        <withRouter(Connect(ResetOnUnmount))
          getStats={[Function]}
          isLoading={false}
          reset={[Function]}
          stats={Array []}
        >
          <Route>
            <Connect(ResetOnUnmount)
              getStats={[Function]}
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              isLoading={false}
              location={
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              reset={[Function]}
              stats={Array []}
            >
              <ResetOnUnmount
                getStats={[Function]}
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                isLoading={false}
                location={
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  }
                }
                match={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
                reset={[Function]}
                stats={Array []}
              >
                <Stats
                  getStats={[Function]}
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  isLoading={false}
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  reset={[Function]}
                  stats={Array []}
                >
                  <div
                    className="container is-fluid section"
                  >
                    <div
                      className="columns"
                    >
                      <div
                        className="column is-three-quarters"
                      >
                        <Connect(withRouter(Connect(ResetOnUnmount)))
                          onParamsSelected={[Function]}
                          onReset={[Function]}
                        >
                          <withRouter(Connect(ResetOnUnmount))
                            isResetDisabled={true}
                            observation={
                              Object {
                                "isActive": false,
                                "isDisabled": true,
                                "isLoading": false,
                                "items": Array [],
                                "selectedItem": null,
                              }
                            }
                            onParamsSelected={[Function]}
                            onReset={[Function]}
                            selectObservation={[Function]}
                            selectType={[Function]}
                            type={
                              Object {
                                "isActive": false,
                                "items": Array [
                                  "event",
                                  "measurement",
                                ],
                                "selectedItem": null,
                              }
                            }
                            updateObservation={[Function]}
                            updateType={[Function]}
                          >
                            <Route>
                              <Connect(ResetOnUnmount)
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                isResetDisabled={true}
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/",
                                    "url": "/",
                                  }
                                }
                                observation={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": true,
                                    "isLoading": false,
                                    "items": Array [],
                                    "selectedItem": null,
                                  }
                                }
                                onParamsSelected={[Function]}
                                onReset={[Function]}
                                selectObservation={[Function]}
                                selectType={[Function]}
                                type={
                                  Object {
                                    "isActive": false,
                                    "items": Array [
                                      "event",
                                      "measurement",
                                    ],
                                    "selectedItem": null,
                                  }
                                }
                                updateObservation={[Function]}
                                updateType={[Function]}
                              >
                                <ResetOnUnmount
                                  history={
                                    Object {
                                      "action": "POP",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  isResetDisabled={true}
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/",
                                      "url": "/",
                                    }
                                  }
                                  observation={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": true,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    }
                                  }
                                  onParamsSelected={[Function]}
                                  onReset={[Function]}
                                  reset={[Function]}
                                  selectObservation={[Function]}
                                  selectType={[Function]}
                                  type={
                                    Object {
                                      "isActive": false,
                                      "items": Array [
                                        "event",
                                        "measurement",
                                      ],
                                      "selectedItem": null,
                                    }
                                  }
                                  updateObservation={[Function]}
                                  updateType={[Function]}
                                >
                                  <StatsParamsPanel
                                    history={
                                      Object {
                                        "action": "POP",
                                        "block": [Function],
                                        "canGo": [Function],
                                        "createHref": [Function],
                                        "entries": Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/",
                                            "search": "",
                                            "state": undefined,
                                          },
                                        ],
                                        "go": [Function],
                                        "goBack": [Function],
                                        "goForward": [Function],
                                        "index": 0,
                                        "length": 1,
                                        "listen": [Function],
                                        "location": Object {
                                          "hash": "",
                                          "pathname": "/",
                                          "search": "",
                                          "state": undefined,
                                        },
                                        "push": [Function],
                                        "replace": [Function],
                                      }
                                    }
                                    isResetDisabled={true}
                                    location={
                                      Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      }
                                    }
                                    match={
                                      Object {
                                        "isExact": true,
                                        "params": Object {},
                                        "path": "/",
                                        "url": "/",
                                      }
                                    }
                                    observation={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": true,
                                        "isLoading": false,
                                        "items": Array [],
                                        "selectedItem": null,
                                      }
                                    }
                                    onParamsSelected={[Function]}
                                    onReset={[Function]}
                                    reset={[Function]}
                                    selectObservation={[Function]}
                                    selectType={[Function]}
                                    type={
                                      Object {
                                        "isActive": false,
                                        "items": Array [
                                          "event",
                                          "measurement",
                                        ],
                                        "selectedItem": null,
                                      }
                                    }
                                    updateObservation={[Function]}
                                    updateType={[Function]}
                                  >
                                    <ParamsPanel
                                      observation={
                                        Object {
                                          "isActive": false,
                                          "isDisabled": true,
                                          "isLoading": false,
                                          "items": Array [],
                                          "label": "Select observation",
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                          "selectedItem": null,
                                        }
                                      }
                                      reset={
                                        Object {
                                          "isDisabled": true,
                                          "onReset": [Function],
                                        }
                                      }
                                      type={
                                        Object {
                                          "isActive": false,
                                          "items": Array [
                                            "event",
                                            "measurement",
                                          ],
                                          "label": "Select type",
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                          "selectedItem": null,
                                        }
                                      }
                                    >
                                      <div
                                        className="box"
                                      >
                                        <div
                                          className="columns"
                                        >
                                          <div
                                            className="column is-5"
                                          >
                                            <Dropdown
                                              buttonStyle=""
                                              iconStyle="fa-angle-down"
                                              isActive={false}
                                              isDisabled={false}
                                              isLoading={false}
                                              items={
                                                Array [
                                                  "event",
                                                  "measurement",
                                                ]
                                              }
                                              label="Select type"
                                              onButtonClick={[Function]}
                                              onItemClick={[Function]}
                                              selectedItem={null}
                                            >
                                              <div
                                                className="dropdown"
                                              >
                                                <div
                                                  className="dropdown-trigger"
                                                >
                                                  <button
                                                    aria-controls="dropdown-menu"
                                                    aria-haspopup="true"
                                                    className="button"
                                                    disabled={false}
                                                    onClick={[Function]}
                                                  >
                                                    <span>
                                                      Select type
                                                    </span>
                                                    <span
                                                      className="icon is-small"
                                                    >
                                                      <i
                                                        aria-hidden="true"
                                                        className="fas fa-angle-down"
                                                      />
                                                    </span>
                                                  </button>
                                                </div>
                                                <div
                                                  className="dropdown-menu"
                                                  id="dropdown-menu"
                                                  role="menu"
                                                >
                                                  <div
                                                    className="dropdown-content"
                                                  >
                                                    <div
                                                      className="dropdown-item"
                                                      key="ZXZlbnQ="
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      event
                                                    </div>
                                                    <div
                                                      className="dropdown-item"
                                                      key="bWVhc3VyZW1lbnQ="
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      measurement
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                            </Dropdown>
                                          </div>
                                          <div
                                            className="column is-5"
                                          >
                                            <Dropdown
                                              buttonStyle=""
                                              iconStyle="fa-angle-down"
                                              isActive={false}
                                              isDisabled={true}
                                              isLoading={false}
                                              items={Array []}
                                              label="Select observation"
                                              onButtonClick={[Function]}
                                              onItemClick={[Function]}
                                              selectedItem={null}
                                            >
                                              <div
                                                className="dropdown"
                                              >
                                                <div
                                                  className="dropdown-trigger"
                                                >
                                                  <button
                                                    aria-controls="dropdown-menu"
                                                    aria-haspopup="true"
                                                    className="button"
                                                    disabled={true}
                                                    onClick={[Function]}
                                                  >
                                                    <span>
                                                      Select observation
                                                    </span>
                                                    <span
                                                      className="icon is-small"
                                                    >
                                                      <i
                                                        aria-hidden="true"
                                                        className="fas fa-angle-down"
                                                      />
                                                    </span>
                                                  </button>
                                                </div>
                                                <div
                                                  className="dropdown-menu"
                                                  id="dropdown-menu"
                                                  role="menu"
                                                >
                                                  <div
                                                    className="dropdown-content"
                                                  />
                                                </div>
                                              </div>
                                            </Dropdown>
                                          </div>
                                          <div
                                            className="column"
                                          >
                                            <button
                                              className="button is-warning is-fullwidth"
                                              disabled={true}
                                              onClick={[Function]}
                                            >
                                              <span>
                                                Reset
                                              </span>
                                              <span
                                                className="icon is-small"
                                              >
                                                <i
                                                  aria-hidden="true"
                                                  className="fas fa-eraser"
                                                />
                                              </span>
                                            </button>
                                          </div>
                                        </div>
                                      </div>
                                    </ParamsPanel>
                                  </StatsParamsPanel>
                                </ResetOnUnmount>
                              </Connect(ResetOnUnmount)>
                            </Route>
                          </withRouter(Connect(ResetOnUnmount))>
                        </Connect(withRouter(Connect(ResetOnUnmount)))>
                      </div>
                      <div
                        className="column is-one-quarter"
                      >
                        <withRouter(Connect(Connect(ResetOnUnmount)))
                          onFiltersChange={[Function]}
                        >
                          <Route>
                            <Connect(Connect(ResetOnUnmount))
                              history={
                                Object {
                                  "action": "POP",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              match={
                                Object {
                                  "isExact": true,
                                  "params": Object {},
                                  "path": "/",
                                  "url": "/",
                                }
                              }
                              onFiltersChange={[Function]}
                            >
                              <Connect(ResetOnUnmount)
                                addFilterType={[Function]}
                                dateFilter={
                                  Object {
                                    "custom": Object {
                                      "endDate": null,
                                      "startDate": null,
                                    },
                                    "isCustomSelected": false,
                                    "timePeriod": Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    },
                                  }
                                }
                                deleteFilterType={[Function]}
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/",
                                    "url": "/",
                                  }
                                }
                                onFiltersChange={[Function]}
                                selectFilterType={[Function]}
                                selectThingFilter={[Function]}
                                selectTimePeriod={[Function]}
                                selectedFilters={Array []}
                                statsType={null}
                                thingFilter={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": false,
                                    "isLoading": false,
                                    "items": Array [],
                                    "selectedItem": null,
                                  }
                                }
                                toggleDateFilterType={[Function]}
                                type={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": false,
                                    "items": Array [
                                      "date",
                                      "thing",
                                    ],
                                  }
                                }
                                updateEndDate={[Function]}
                                updateStartDate={[Function]}
                                updateThingFilter={[Function]}
                                updateTimePeriod={[Function]}
                              >
                                <ResetOnUnmount
                                  addFilterType={[Function]}
                                  dateFilter={
                                    Object {
                                      "custom": Object {
                                        "endDate": null,
                                        "startDate": null,
                                      },
                                      "isCustomSelected": false,
                                      "timePeriod": Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "items": Array [],
                                        "selectedItem": null,
                                      },
                                    }
                                  }
                                  deleteFilterType={[Function]}
                                  history={
                                    Object {
                                      "action": "POP",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/",
                                      "url": "/",
                                    }
                                  }
                                  onFiltersChange={[Function]}
                                  reset={[Function]}
                                  selectFilterType={[Function]}
                                  selectThingFilter={[Function]}
                                  selectTimePeriod={[Function]}
                                  selectedFilters={Array []}
                                  statsType={null}
                                  thingFilter={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    }
                                  }
                                  toggleDateFilterType={[Function]}
                                  type={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "items": Array [
                                        "date",
                                        "thing",
                                      ],
                                    }
                                  }
                                  updateEndDate={[Function]}
                                  updateStartDate={[Function]}
                                  updateThingFilter={[Function]}
                                  updateTimePeriod={[Function]}
                                >
                                  <StatsFiltersPanel
                                    addFilterType={[Function]}
                                    dateFilter={
                                      Object {
                                        "custom": Object {
                                          "endDate": null,
                                          "startDate": null,
                                        },
                                        "isCustomSelected": false,
                                        "timePeriod": Object {
                                          "isActive": false,
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "items": Array [],
                                          "selectedItem": null,
                                        },
                                      }
                                    }
                                    deleteFilterType={[Function]}
                                    history={
                                      Object {
                                        "action": "POP",
                                        "block": [Function],
                                        "canGo": [Function],
                                        "createHref": [Function],
                                        "entries": Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/",
                                            "search": "",
                                            "state": undefined,
                                          },
                                        ],
                                        "go": [Function],
                                        "goBack": [Function],
                                        "goForward": [Function],
                                        "index": 0,
                                        "length": 1,
                                        "listen": [Function],
                                        "location": Object {
                                          "hash": "",
                                          "pathname": "/",
                                          "search": "",
                                          "state": undefined,
                                        },
                                        "push": [Function],
                                        "replace": [Function],
                                      }
                                    }
                                    location={
                                      Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      }
                                    }
                                    match={
                                      Object {
                                        "isExact": true,
                                        "params": Object {},
                                        "path": "/",
                                        "url": "/",
                                      }
                                    }
                                    onFiltersChange={[Function]}
                                    reset={[Function]}
                                    selectFilterType={[Function]}
                                    selectThingFilter={[Function]}
                                    selectTimePeriod={[Function]}
                                    selectedFilters={Array []}
                                    statsType={null}
                                    thingFilter={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "items": Array [],
                                        "selectedItem": null,
                                      }
                                    }
                                    toggleDateFilterType={[Function]}
                                    type={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "items": Array [
                                          "date",
                                          "thing",
                                        ],
                                      }
                                    }
                                    updateEndDate={[Function]}
                                    updateStartDate={[Function]}
                                    updateThingFilter={[Function]}
                                    updateTimePeriod={[Function]}
                                  >
                                    <FiltersPanel
                                      dateFilter={
                                        Object {
                                          "custom": Object {
                                            "endDate": Object {
                                              "onChange": [Function],
                                              "selected": null,
                                            },
                                            "startDate": Object {
                                              "onChange": [Function],
                                              "selected": null,
                                            },
                                          },
                                          "isCustomSelected": false,
                                          "onDelete": [Function],
                                          "selector": Object {
                                            "isCustomSelected": false,
                                            "onChange": [Function],
                                          },
                                          "timePeriod": Object {
                                            "isActive": false,
                                            "isDisabled": false,
                                            "isLoading": false,
                                            "items": Array [],
                                            "label": "Select Time Period:",
                                            "onButtonClick": [Function],
                                            "onItemClick": [Function],
                                            "selectedItem": null,
                                          },
                                        }
                                      }
                                      selectedFilters={Array []}
                                      thingFilter={
                                        Object {
                                          "isActive": false,
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "items": Array [],
                                          "label": "Select Thing: ",
                                          "onButtonClick": [Function],
                                          "onDelete": [Function],
                                          "onItemClick": [Function],
                                          "selectedItem": null,
                                        }
                                      }
                                      type={
                                        Object {
                                          "isActive": false,
                                          "isDisabled": false,
                                          "items": Array [
                                            "date",
                                            "thing",
                                          ],
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                        }
                                      }
                                    >
                                      <div
                                        className="box"
                                      >
                                        <div
                                          className="columns"
                                        >
                                          <div
                                            className="column"
                                          >
                                            <Dropdown
                                              buttonStyle="is-primary"
                                              iconStyle="fa-plus"
                                              isActive={false}
                                              isDisabled={false}
                                              isLoading={false}
                                              items={
                                                Array [
                                                  "date",
                                                  "thing",
                                                ]
                                              }
                                              label="Filters"
                                              onButtonClick={[Function]}
                                              onItemClick={[Function]}
                                            >
                                              <div
                                                className="dropdown"
                                              >
                                                <div
                                                  className="dropdown-trigger"
                                                >
                                                  <button
                                                    aria-controls="dropdown-menu"
                                                    aria-haspopup="true"
                                                    className="button is-primary"
                                                    disabled={false}
                                                    onClick={[Function]}
                                                  >
                                                    <span>
                                                      Filters
                                                    </span>
                                                    <span
                                                      className="icon is-small"
                                                    >
                                                      <i
                                                        aria-hidden="true"
                                                        className="fas fa-plus"
                                                      />
                                                    </span>
                                                  </button>
                                                </div>
                                                <div
                                                  className="dropdown-menu"
                                                  id="dropdown-menu"
                                                  role="menu"
                                                >
                                                  <div
                                                    className="dropdown-content"
                                                  >
                                                    <div
                                                      className="dropdown-item"
                                                      key="ZGF0ZQ=="
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      date
                                                    </div>
                                                    <div
                                                      className="dropdown-item"
                                                      key="dGhpbmc="
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      thing
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                            </Dropdown>
                                          </div>
                                        </div>
                                      </div>
                                    </FiltersPanel>
                                  </StatsFiltersPanel>
                                </ResetOnUnmount>
                              </Connect(ResetOnUnmount)>
                            </Connect(Connect(ResetOnUnmount))>
                          </Route>
                        </withRouter(Connect(Connect(ResetOnUnmount)))>
                      </div>
                    </div>
                  </div>
                </Stats>
              </ResetOnUnmount>
            </Connect(ResetOnUnmount)>
          </Route>
        </withRouter(Connect(ResetOnUnmount))>
      </Connect(withRouter(Connect(ResetOnUnmount)))>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`containers/stats renders when loading stats 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Connect(withRouter(Connect(ResetOnUnmount)))>
        <withRouter(Connect(ResetOnUnmount))
          getStats={[Function]}
          isLoading={true}
          reset={[Function]}
          stats={Array []}
        >
          <Route>
            <Connect(ResetOnUnmount)
              getStats={[Function]}
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              isLoading={true}
              location={
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              reset={[Function]}
              stats={Array []}
            >
              <ResetOnUnmount
                getStats={[Function]}
                history={
                  Object {
                    "action": "POP",
                    "block": [Function],
                    "canGo": [Function],
                    "createHref": [Function],
                    "entries": Array [
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                    ],
                    "go": [Function],
                    "goBack": [Function],
                    "goForward": [Function],
                    "index": 0,
                    "length": 1,
                    "listen": [Function],
                    "location": Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    "push": [Function],
                    "replace": [Function],
                  }
                }
                isLoading={true}
                location={
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  }
                }
                match={
                  Object {
                    "isExact": true,
                    "params": Object {},
                    "path": "/",
                    "url": "/",
                  }
                }
                reset={[Function]}
                stats={Array []}
              >
                <Stats
                  getStats={[Function]}
                  history={
                    Object {
                      "action": "POP",
                      "block": [Function],
                      "canGo": [Function],
                      "createHref": [Function],
                      "entries": Array [
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                      ],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "index": 0,
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  isLoading={true}
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  reset={[Function]}
                  stats={Array []}
                >
                  <div
                    className="container is-fluid section"
                  >
                    <div
                      className="columns"
                    >
                      <div
                        className="column is-three-quarters"
                      >
                        <Connect(withRouter(Connect(ResetOnUnmount)))
                          onParamsSelected={[Function]}
                          onReset={[Function]}
                        >
                          <withRouter(Connect(ResetOnUnmount))
                            isResetDisabled={true}
                            observation={
                              Object {
                                "isActive": false,
                                "isDisabled": true,
                                "isLoading": false,
                                "items": Array [],
                                "selectedItem": null,
                              }
                            }
                            onParamsSelected={[Function]}
                            onReset={[Function]}
                            selectObservation={[Function]}
                            selectType={[Function]}
                            type={
                              Object {
                                "isActive": false,
                                "items": Array [
                                  "event",
                                  "measurement",
                                ],
                                "selectedItem": null,
                              }
                            }
                            updateObservation={[Function]}
                            updateType={[Function]}
                          >
                            <Route>
                              <Connect(ResetOnUnmount)
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                isResetDisabled={true}
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/",
                                    "url": "/",
                                  }
                                }
                                observation={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": true,
                                    "isLoading": false,
                                    "items": Array [],
                                    "selectedItem": null,
                                  }
                                }
                                onParamsSelected={[Function]}
                                onReset={[Function]}
                                selectObservation={[Function]}
                                selectType={[Function]}
                                type={
                                  Object {
                                    "isActive": false,
                                    "items": Array [
                                      "event",
                                      "measurement",
                                    ],
                                    "selectedItem": null,
                                  }
                                }
                                updateObservation={[Function]}
                                updateType={[Function]}
                              >
                                <ResetOnUnmount
                                  history={
                                    Object {
                                      "action": "POP",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  isResetDisabled={true}
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/",
                                      "url": "/",
                                    }
                                  }
                                  observation={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": true,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    }
                                  }
                                  onParamsSelected={[Function]}
                                  onReset={[Function]}
                                  reset={[Function]}
                                  selectObservation={[Function]}
                                  selectType={[Function]}
                                  type={
                                    Object {
                                      "isActive": false,
                                      "items": Array [
                                        "event",
                                        "measurement",
                                      ],
                                      "selectedItem": null,
                                    }
                                  }
                                  updateObservation={[Function]}
                                  updateType={[Function]}
                                >
                                  <StatsParamsPanel
                                    history={
                                      Object {
                                        "action": "POP",
                                        "block": [Function],
                                        "canGo": [Function],
                                        "createHref": [Function],
                                        "entries": Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/",
                                            "search": "",
                                            "state": undefined,
                                          },
                                        ],
                                        "go": [Function],
                                        "goBack": [Function],
                                        "goForward": [Function],
                                        "index": 0,
                                        "length": 1,
                                        "listen": [Function],
                                        "location": Object {
                                          "hash": "",
                                          "pathname": "/",
                                          "search": "",
                                          "state": undefined,
                                        },
                                        "push": [Function],
                                        "replace": [Function],
                                      }
                                    }
                                    isResetDisabled={true}
                                    location={
                                      Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      }
                                    }
                                    match={
                                      Object {
                                        "isExact": true,
                                        "params": Object {},
                                        "path": "/",
                                        "url": "/",
                                      }
                                    }
                                    observation={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": true,
                                        "isLoading": false,
                                        "items": Array [],
                                        "selectedItem": null,
                                      }
                                    }
                                    onParamsSelected={[Function]}
                                    onReset={[Function]}
                                    reset={[Function]}
                                    selectObservation={[Function]}
                                    selectType={[Function]}
                                    type={
                                      Object {
                                        "isActive": false,
                                        "items": Array [
                                          "event",
                                          "measurement",
                                        ],
                                        "selectedItem": null,
                                      }
                                    }
                                    updateObservation={[Function]}
                                    updateType={[Function]}
                                  >
                                    <ParamsPanel
                                      observation={
                                        Object {
                                          "isActive": false,
                                          "isDisabled": true,
                                          "isLoading": false,
                                          "items": Array [],
                                          "label": "Select observation",
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                          "selectedItem": null,
                                        }
                                      }
                                      reset={
                                        Object {
                                          "isDisabled": true,
                                          "onReset": [Function],
                                        }
                                      }
                                      type={
                                        Object {
                                          "isActive": false,
                                          "items": Array [
                                            "event",
                                            "measurement",
                                          ],
                                          "label": "Select type",
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                          "selectedItem": null,
                                        }
                                      }
                                    >
                                      <div
                                        className="box"
                                      >
                                        <div
                                          className="columns"
                                        >
                                          <div
                                            className="column is-5"
                                          >
                                            <Dropdown
                                              buttonStyle=""
                                              iconStyle="fa-angle-down"
                                              isActive={false}
                                              isDisabled={false}
                                              isLoading={false}
                                              items={
                                                Array [
                                                  "event",
                                                  "measurement",
                                                ]
                                              }
                                              label="Select type"
                                              onButtonClick={[Function]}
                                              onItemClick={[Function]}
                                              selectedItem={null}
                                            >
                                              <div
                                                className="dropdown"
                                              >
                                                <div
                                                  className="dropdown-trigger"
                                                >
                                                  <button
                                                    aria-controls="dropdown-menu"
                                                    aria-haspopup="true"
                                                    className="button"
                                                    disabled={false}
                                                    onClick={[Function]}
                                                  >
                                                    <span>
                                                      Select type
                                                    </span>
                                                    <span
                                                      className="icon is-small"
                                                    >
                                                      <i
                                                        aria-hidden="true"
                                                        className="fas fa-angle-down"
                                                      />
                                                    </span>
                                                  </button>
                                                </div>
                                                <div
                                                  className="dropdown-menu"
                                                  id="dropdown-menu"
                                                  role="menu"
                                                >
                                                  <div
                                                    className="dropdown-content"
                                                  >
                                                    <div
                                                      className="dropdown-item"
                                                      key="ZXZlbnQ="
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      event
                                                    </div>
                                                    <div
                                                      className="dropdown-item"
                                                      key="bWVhc3VyZW1lbnQ="
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      measurement
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                            </Dropdown>
                                          </div>
                                          <div
                                            className="column is-5"
                                          >
                                            <Dropdown
                                              buttonStyle=""
                                              iconStyle="fa-angle-down"
                                              isActive={false}
                                              isDisabled={true}
                                              isLoading={false}
                                              items={Array []}
                                              label="Select observation"
                                              onButtonClick={[Function]}
                                              onItemClick={[Function]}
                                              selectedItem={null}
                                            >
                                              <div
                                                className="dropdown"
                                              >
                                                <div
                                                  className="dropdown-trigger"
                                                >
                                                  <button
                                                    aria-controls="dropdown-menu"
                                                    aria-haspopup="true"
                                                    className="button"
                                                    disabled={true}
                                                    onClick={[Function]}
                                                  >
                                                    <span>
                                                      Select observation
                                                    </span>
                                                    <span
                                                      className="icon is-small"
                                                    >
                                                      <i
                                                        aria-hidden="true"
                                                        className="fas fa-angle-down"
                                                      />
                                                    </span>
                                                  </button>
                                                </div>
                                                <div
                                                  className="dropdown-menu"
                                                  id="dropdown-menu"
                                                  role="menu"
                                                >
                                                  <div
                                                    className="dropdown-content"
                                                  />
                                                </div>
                                              </div>
                                            </Dropdown>
                                          </div>
                                          <div
                                            className="column"
                                          >
                                            <button
                                              className="button is-warning is-fullwidth"
                                              disabled={true}
                                              onClick={[Function]}
                                            >
                                              <span>
                                                Reset
                                              </span>
                                              <span
                                                className="icon is-small"
                                              >
                                                <i
                                                  aria-hidden="true"
                                                  className="fas fa-eraser"
                                                />
                                              </span>
                                            </button>
                                          </div>
                                        </div>
                                      </div>
                                    </ParamsPanel>
                                  </StatsParamsPanel>
                                </ResetOnUnmount>
                              </Connect(ResetOnUnmount)>
                            </Route>
                          </withRouter(Connect(ResetOnUnmount))>
                        </Connect(withRouter(Connect(ResetOnUnmount)))>
                        <Loader>
                          <div
                            className="is-horizontal-center"
                          >
                            <figure
                              className="image is-128x128"
                            >
                              <img
                                alt="Loader"
                                src="test-file-stub"
                              />
                            </figure>
                          </div>
                        </Loader>
                      </div>
                      <div
                        className="column is-one-quarter"
                      >
                        <withRouter(Connect(Connect(ResetOnUnmount)))
                          onFiltersChange={[Function]}
                        >
                          <Route>
                            <Connect(Connect(ResetOnUnmount))
                              history={
                                Object {
                                  "action": "POP",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              match={
                                Object {
                                  "isExact": true,
                                  "params": Object {},
                                  "path": "/",
                                  "url": "/",
                                }
                              }
                              onFiltersChange={[Function]}
                            >
                              <Connect(ResetOnUnmount)
                                addFilterType={[Function]}
                                dateFilter={
                                  Object {
                                    "custom": Object {
                                      "endDate": null,
                                      "startDate": null,
                                    },
                                    "isCustomSelected": false,
                                    "timePeriod": Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    },
                                  }
                                }
                                deleteFilterType={[Function]}
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/",
                                    "url": "/",
                                  }
                                }
                                onFiltersChange={[Function]}
                                selectFilterType={[Function]}
                                selectThingFilter={[Function]}
                                selectTimePeriod={[Function]}
                                selectedFilters={Array []}
                                statsType={null}
                                thingFilter={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": false,
                                    "isLoading": false,
                                    "items": Array [],
                                    "selectedItem": null,
                                  }
                                }
                                toggleDateFilterType={[Function]}
                                type={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": false,
                                    "items": Array [
                                      "date",
                                      "thing",
                                    ],
                                  }
                                }
                                updateEndDate={[Function]}
                                updateStartDate={[Function]}
                                updateThingFilter={[Function]}
                                updateTimePeriod={[Function]}
                              >
                                <ResetOnUnmount
                                  addFilterType={[Function]}
                                  dateFilter={
                                    Object {
                                      "custom": Object {
                                        "endDate": null,
                                        "startDate": null,
                                      },
                                      "isCustomSelected": false,
                                      "timePeriod": Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "items": Array [],
                                        "selectedItem": null,
                                      },
                                    }
                                  }
                                  deleteFilterType={[Function]}
                                  history={
                                    Object {
                                      "action": "POP",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/",
                                      "url": "/",
                                    }
                                  }
                                  onFiltersChange={[Function]}
                                  reset={[Function]}
                                  selectFilterType={[Function]}
                                  selectThingFilter={[Function]}
                                  selectTimePeriod={[Function]}
                                  selectedFilters={Array []}
                                  statsType={null}
                                  thingFilter={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    }
                                  }
                                  toggleDateFilterType={[Function]}
                                  type={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": false,
                                      "items": Array [
                                        "date",
                                        "thing",
                                      ],
                                    }
                                  }
                                  updateEndDate={[Function]}
                                  updateStartDate={[Function]}
                                  updateThingFilter={[Function]}
                                  updateTimePeriod={[Function]}
                                >
                                  <StatsFiltersPanel
                                    addFilterType={[Function]}
                                    dateFilter={
                                      Object {
                                        "custom": Object {
                                          "endDate": null,
                                          "startDate": null,
                                        },
                                        "isCustomSelected": false,
                                        "timePeriod": Object {
                                          "isActive": false,
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "items": Array [],
                                          "selectedItem": null,
                                        },
                                      }
                                    }
                                    deleteFilterType={[Function]}
                                    history={
                                      Object {
                                        "action": "POP",
                                        "block": [Function],
                                        "canGo": [Function],
                                        "createHref": [Function],
                                        "entries": Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/",
                                            "search": "",
                                            "state": undefined,
                                          },
                                        ],
                                        "go": [Function],
                                        "goBack": [Function],
                                        "goForward": [Function],
                                        "index": 0,
                                        "length": 1,
                                        "listen": [Function],
                                        "location": Object {
                                          "hash": "",
                                          "pathname": "/",
                                          "search": "",
                                          "state": undefined,
                                        },
                                        "push": [Function],
                                        "replace": [Function],
                                      }
                                    }
                                    location={
                                      Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      }
                                    }
                                    match={
                                      Object {
                                        "isExact": true,
                                        "params": Object {},
                                        "path": "/",
                                        "url": "/",
                                      }
                                    }
                                    onFiltersChange={[Function]}
                                    reset={[Function]}
                                    selectFilterType={[Function]}
                                    selectThingFilter={[Function]}
                                    selectTimePeriod={[Function]}
                                    selectedFilters={Array []}
                                    statsType={null}
                                    thingFilter={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "isLoading": false,
                                        "items": Array [],
                                        "selectedItem": null,
                                      }
                                    }
                                    toggleDateFilterType={[Function]}
                                    type={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": false,
                                        "items": Array [
                                          "date",
                                          "thing",
                                        ],
                                      }
                                    }
                                    updateEndDate={[Function]}
                                    updateStartDate={[Function]}
                                    updateThingFilter={[Function]}
                                    updateTimePeriod={[Function]}
                                  >
                                    <FiltersPanel
                                      dateFilter={
                                        Object {
                                          "custom": Object {
                                            "endDate": Object {
                                              "onChange": [Function],
                                              "selected": null,
                                            },
                                            "startDate": Object {
                                              "onChange": [Function],
                                              "selected": null,
                                            },
                                          },
                                          "isCustomSelected": false,
                                          "onDelete": [Function],
                                          "selector": Object {
                                            "isCustomSelected": false,
                                            "onChange": [Function],
                                          },
                                          "timePeriod": Object {
                                            "isActive": false,
                                            "isDisabled": false,
                                            "isLoading": false,
                                            "items": Array [],
                                            "label": "Select Time Period:",
                                            "onButtonClick": [Function],
                                            "onItemClick": [Function],
                                            "selectedItem": null,
                                          },
                                        }
                                      }
                                      selectedFilters={Array []}
                                      thingFilter={
                                        Object {
                                          "isActive": false,
                                          "isDisabled": false,
                                          "isLoading": false,
                                          "items": Array [],
                                          "label": "Select Thing: ",
                                          "onButtonClick": [Function],
                                          "onDelete": [Function],
                                          "onItemClick": [Function],
                                          "selectedItem": null,
                                        }
                                      }
                                      type={
                                        Object {
                                          "isActive": false,
                                          "isDisabled": false,
                                          "items": Array [
                                            "date",
                                            "thing",
                                          ],
                                          "onButtonClick": [Function],
                                          "onItemClick": [Function],
                                        }
                                      }
                                    >
                                      <div
                                        className="box"
                                      >
                                        <div
                                          className="columns"
                                        >
                                          <div
                                            className="column"
                                          >
                                            <Dropdown
                                              buttonStyle="is-primary"
                                              iconStyle="fa-plus"
                                              isActive={false}
                                              isDisabled={false}
                                              isLoading={false}
                                              items={
                                                Array [
                                                  "date",
                                                  "thing",
                                                ]
                                              }
                                              label="Filters"
                                              onButtonClick={[Function]}
                                              onItemClick={[Function]}
                                            >
                                              <div
                                                className="dropdown"
                                              >
                                                <div
                                                  className="dropdown-trigger"
                                                >
                                                  <button
                                                    aria-controls="dropdown-menu"
                                                    aria-haspopup="true"
                                                    className="button is-primary"
                                                    disabled={false}
                                                    onClick={[Function]}
                                                  >
                                                    <span>
                                                      Filters
                                                    </span>
                                                    <span
                                                      className="icon is-small"
                                                    >
                                                      <i
                                                        aria-hidden="true"
                                                        className="fas fa-plus"
                                                      />
                                                    </span>
                                                  </button>
                                                </div>
                                                <div
                                                  className="dropdown-menu"
                                                  id="dropdown-menu"
                                                  role="menu"
                                                >
                                                  <div
                                                    className="dropdown-content"
                                                  >
                                                    <div
                                                      className="dropdown-item"
                                                      key="ZGF0ZQ=="
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      date
                                                    </div>
                                                    <div
                                                      className="dropdown-item"
                                                      key="dGhpbmc="
                                                      onClick={[Function]}
                                                      onKeyPress={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      thing
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                            </Dropdown>
                                          </div>
                                        </div>
                                      </div>
                                    </FiltersPanel>
                                  </StatsFiltersPanel>
                                </ResetOnUnmount>
                              </Connect(ResetOnUnmount)>
                            </Connect(Connect(ResetOnUnmount))>
                          </Route>
                        </withRouter(Connect(Connect(ResetOnUnmount)))>
                      </div>
                    </div>
                  </div>
                </Stats>
              </ResetOnUnmount>
            </Connect(ResetOnUnmount)>
          </Route>
        </withRouter(Connect(ResetOnUnmount))>
      </Connect(withRouter(Connect(ResetOnUnmount)))>
    </Provider>
  </Router>
</MemoryRouter>
`;
