// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`containers/app renders app in error state 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/stats",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/stats",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/stats",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <withRouter(Connect(App))
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Route>
        <Connect(App)
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "pathname": "/stats",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/stats",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/stats",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": false,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        >
          <App
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/stats",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/stats",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            isAuth={true}
            location={
              Object {
                "hash": "",
                "pathname": "/stats",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": false,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            setShowError={[Function]}
            shouldShowError={true}
            store={
              Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
            storeSubscription={
              Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              }
            }
          >
            <Provider
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            >
              <Main>
                <div
                  className="has-navbar-fixed-top"
                >
                  <withRouter(Connect(Connect(ResetOnUnmount)))>
                    <Route>
                      <Connect(Connect(ResetOnUnmount))
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/stats",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/stats",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/stats",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      >
                        <Connect(ResetOnUnmount)
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/stats",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/stats",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          isHamburgerMenuExpanded={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/stats",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          logout={[Function]}
                          match={
                            Object {
                              "isExact": false,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                          toggleHamburgerMenu={[Function]}
                        >
                          <ResetOnUnmount
                            history={
                              Object {
                                "action": "POP",
                                "block": [Function],
                                "canGo": [Function],
                                "createHref": [Function],
                                "entries": Array [
                                  Object {
                                    "hash": "",
                                    "pathname": "/stats",
                                    "search": "",
                                    "state": undefined,
                                  },
                                ],
                                "go": [Function],
                                "goBack": [Function],
                                "goForward": [Function],
                                "index": 0,
                                "length": 1,
                                "listen": [Function],
                                "location": Object {
                                  "hash": "",
                                  "pathname": "/stats",
                                  "search": "",
                                  "state": undefined,
                                },
                                "push": [Function],
                                "replace": [Function],
                              }
                            }
                            isHamburgerMenuExpanded={false}
                            location={
                              Object {
                                "hash": "",
                                "pathname": "/stats",
                                "search": "",
                                "state": undefined,
                              }
                            }
                            logout={[Function]}
                            match={
                              Object {
                                "isExact": false,
                                "params": Object {},
                                "path": "/",
                                "url": "/",
                              }
                            }
                            reset={[Function]}
                            toggleHamburgerMenu={[Function]}
                          >
                            <Navbar
                              history={
                                Object {
                                  "action": "POP",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/stats",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/stats",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              isHamburgerMenuExpanded={false}
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/stats",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              logout={[Function]}
                              match={
                                Object {
                                  "isExact": false,
                                  "params": Object {},
                                  "path": "/",
                                  "url": "/",
                                }
                              }
                              reset={[Function]}
                              toggleHamburgerMenu={[Function]}
                            >
                              <nav
                                className="navbar has-shadow is-spaced"
                              >
                                <div
                                  className="navbar-brand"
                                >
                                  <NavLink
                                    activeClassName="active"
                                    aria-current="page"
                                    className="navbar-item"
                                    to="/"
                                  >
                                    <Route
                                      path="\\\\/"
                                    >
                                      <Link
                                        aria-current="page"
                                        className="navbar-item active"
                                        replace={false}
                                        style={Object {}}
                                        to="/"
                                      >
                                        <a
                                          aria-current="page"
                                          className="navbar-item active"
                                          href="/"
                                          onClick={[Function]}
                                          style={Object {}}
                                        >
                                          <h1
                                            className="title"
                                          >
                                            IoT
                                          </h1>
                                        </a>
                                      </Link>
                                    </Route>
                                  </NavLink>
                                  <div
                                    className="navbar-burger burger"
                                    data-target="navbar-menu"
                                    onClick={[Function]}
                                    onKeyPress={[Function]}
                                    role="button"
                                    tabIndex={0}
                                  >
                                    <span />
                                    <span />
                                    <span />
                                  </div>
                                </div>
                                <div
                                  className="navbar-menu"
                                  id="navbar-menu"
                                >
                                  <div
                                    className="navbar-start"
                                  >
                                    <NavLink
                                      activeClassName="navbar-item-active"
                                      aria-current="page"
                                      className="navbar-item"
                                      to="/things"
                                    >
                                      <Route
                                        path="\\\\/things"
                                      >
                                        <Link
                                          aria-current={null}
                                          className="navbar-item"
                                          replace={false}
                                          to="/things"
                                        >
                                          <a
                                            aria-current={null}
                                            className="navbar-item"
                                            href="/things"
                                            onClick={[Function]}
                                          >
                                            <span
                                              className="icon"
                                            >
                                              <i
                                                className="fas fa-microchip"
                                              />
                                            </span>
                                            <span>
                                              Things
                                            </span>
                                          </a>
                                        </Link>
                                      </Route>
                                    </NavLink>
                                    <NavLink
                                      activeClassName="navbar-item-active"
                                      aria-current="page"
                                      className="navbar-item"
                                      to="/stats"
                                    >
                                      <Route
                                        path="\\\\/stats"
                                      >
                                        <Link
                                          aria-current="page"
                                          className="navbar-item navbar-item-active"
                                          replace={false}
                                          style={Object {}}
                                          to="/stats"
                                        >
                                          <a
                                            aria-current="page"
                                            className="navbar-item navbar-item-active"
                                            href="/stats"
                                            onClick={[Function]}
                                            style={Object {}}
                                          >
                                            <span
                                              className="icon"
                                            >
                                              <i
                                                className="fas fa-chart-bar"
                                              />
                                            </span>
                                            <span>
                                              Stats
                                            </span>
                                          </a>
                                        </Link>
                                      </Route>
                                    </NavLink>
                                  </div>
                                  <div
                                    className="navbar-end"
                                  >
                                    <div
                                      className="navbar-item"
                                    >
                                      <div
                                        className="field"
                                      >
                                        <p
                                          className="control"
                                        >
                                          <button
                                            className="button is-primary"
                                            id="logout-button"
                                            onClick={[Function]}
                                          >
                                            <span
                                              className="icon"
                                            >
                                              <i
                                                className="fa fa-user"
                                              />
                                            </span>
                                            <span>
                                              Logout
                                            </span>
                                          </button>
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </nav>
                            </Navbar>
                          </ResetOnUnmount>
                        </Connect(ResetOnUnmount)>
                      </Connect(Connect(ResetOnUnmount))>
                    </Route>
                  </withRouter(Connect(Connect(ResetOnUnmount)))>
                  <main>
                    <Switch>
                      <Route
                        component={[Function]}
                        computedMatch={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/stats",
                            "url": "/stats",
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/stats",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        path="/stats"
                      >
                        <Connect(withRouter(Connect(ResetOnUnmount)))
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/stats",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/stats",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/stats",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/stats",
                              "url": "/stats",
                            }
                          }
                        >
                          <withRouter(Connect(ResetOnUnmount))
                            getStats={[Function]}
                            history={
                              Object {
                                "action": "POP",
                                "block": [Function],
                                "canGo": [Function],
                                "createHref": [Function],
                                "entries": Array [
                                  Object {
                                    "hash": "",
                                    "pathname": "/stats",
                                    "search": "",
                                    "state": undefined,
                                  },
                                ],
                                "go": [Function],
                                "goBack": [Function],
                                "goForward": [Function],
                                "index": 0,
                                "length": 1,
                                "listen": [Function],
                                "location": Object {
                                  "hash": "",
                                  "pathname": "/stats",
                                  "search": "",
                                  "state": undefined,
                                },
                                "push": [Function],
                                "replace": [Function],
                              }
                            }
                            isResetDisabled={true}
                            location={
                              Object {
                                "hash": "",
                                "pathname": "/stats",
                                "search": "",
                                "state": undefined,
                              }
                            }
                            match={
                              Object {
                                "isExact": true,
                                "params": Object {},
                                "path": "/stats",
                                "url": "/stats",
                              }
                            }
                            observation={
                              Object {
                                "isActive": false,
                                "isDisabled": true,
                                "isLoading": false,
                                "items": Array [],
                                "selectedItem": null,
                              }
                            }
                            reset={[Function]}
                            selectObservation={[Function]}
                            selectType={[Function]}
                            type={
                              Object {
                                "isActive": false,
                                "items": Array [
                                  "event",
                                  "measurement",
                                ],
                                "selectedItem": null,
                              }
                            }
                            updateObservation={[Function]}
                            updateType={[Function]}
                          >
                            <Route>
                              <Connect(ResetOnUnmount)
                                getStats={[Function]}
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/stats",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/stats",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                isResetDisabled={true}
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/stats",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/stats",
                                    "url": "/stats",
                                  }
                                }
                                observation={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": true,
                                    "isLoading": false,
                                    "items": Array [],
                                    "selectedItem": null,
                                  }
                                }
                                reset={[Function]}
                                selectObservation={[Function]}
                                selectType={[Function]}
                                type={
                                  Object {
                                    "isActive": false,
                                    "items": Array [
                                      "event",
                                      "measurement",
                                    ],
                                    "selectedItem": null,
                                  }
                                }
                                updateObservation={[Function]}
                                updateType={[Function]}
                              >
                                <ResetOnUnmount
                                  getStats={[Function]}
                                  history={
                                    Object {
                                      "action": "POP",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/stats",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/stats",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  isResetDisabled={true}
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/stats",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/stats",
                                      "url": "/stats",
                                    }
                                  }
                                  observation={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": true,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    }
                                  }
                                  reset={[Function]}
                                  selectObservation={[Function]}
                                  selectType={[Function]}
                                  type={
                                    Object {
                                      "isActive": false,
                                      "items": Array [
                                        "event",
                                        "measurement",
                                      ],
                                      "selectedItem": null,
                                    }
                                  }
                                  updateObservation={[Function]}
                                  updateType={[Function]}
                                >
                                  <Stats
                                    getStats={[Function]}
                                    history={
                                      Object {
                                        "action": "POP",
                                        "block": [Function],
                                        "canGo": [Function],
                                        "createHref": [Function],
                                        "entries": Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/stats",
                                            "search": "",
                                            "state": undefined,
                                          },
                                        ],
                                        "go": [Function],
                                        "goBack": [Function],
                                        "goForward": [Function],
                                        "index": 0,
                                        "length": 1,
                                        "listen": [Function],
                                        "location": Object {
                                          "hash": "",
                                          "pathname": "/stats",
                                          "search": "",
                                          "state": undefined,
                                        },
                                        "push": [Function],
                                        "replace": [Function],
                                      }
                                    }
                                    isResetDisabled={true}
                                    location={
                                      Object {
                                        "hash": "",
                                        "pathname": "/stats",
                                        "search": "",
                                        "state": undefined,
                                      }
                                    }
                                    match={
                                      Object {
                                        "isExact": true,
                                        "params": Object {},
                                        "path": "/stats",
                                        "url": "/stats",
                                      }
                                    }
                                    observation={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": true,
                                        "isLoading": false,
                                        "items": Array [],
                                        "selectedItem": null,
                                      }
                                    }
                                    reset={[Function]}
                                    selectObservation={[Function]}
                                    selectType={[Function]}
                                    type={
                                      Object {
                                        "isActive": false,
                                        "items": Array [
                                          "event",
                                          "measurement",
                                        ],
                                        "selectedItem": null,
                                      }
                                    }
                                    updateObservation={[Function]}
                                    updateType={[Function]}
                                  >
                                    <div
                                      className="container is-fluid section"
                                    >
                                      <div
                                        className="columns"
                                      >
                                        <div
                                          className="column is-three-quarters"
                                        >
                                          <ParamsPanel
                                            observation={
                                              Object {
                                                "isActive": false,
                                                "isDisabled": true,
                                                "isLoading": false,
                                                "items": Array [],
                                                "label": "Select observation",
                                                "onButtonClick": [Function],
                                                "onItemClick": [Function],
                                                "selectedItem": null,
                                              }
                                            }
                                            reset={
                                              Object {
                                                "isDisabled": true,
                                                "onReset": [Function],
                                              }
                                            }
                                            type={
                                              Object {
                                                "isActive": false,
                                                "items": Array [
                                                  "event",
                                                  "measurement",
                                                ],
                                                "label": "Select type",
                                                "onButtonClick": [Function],
                                                "onItemClick": [Function],
                                                "selectedItem": null,
                                              }
                                            }
                                          >
                                            <div
                                              className="box"
                                            >
                                              <div
                                                className="columns"
                                              >
                                                <div
                                                  className="column is-5"
                                                >
                                                  <Dropdown
                                                    isActive={false}
                                                    isDisabled={false}
                                                    isLoading={false}
                                                    items={
                                                      Array [
                                                        "event",
                                                        "measurement",
                                                      ]
                                                    }
                                                    label="Select type"
                                                    onButtonClick={[Function]}
                                                    onItemClick={[Function]}
                                                    selectedItem={null}
                                                  >
                                                    <div
                                                      className="dropdown"
                                                    >
                                                      <div
                                                        className="dropdown-trigger"
                                                      >
                                                        <button
                                                          aria-controls="dropdown-menu"
                                                          aria-haspopup="true"
                                                          className="button"
                                                          disabled={false}
                                                          onClick={[Function]}
                                                        >
                                                          <span>
                                                            Select type
                                                          </span>
                                                          <span
                                                            className="icon is-small"
                                                          >
                                                            <i
                                                              aria-hidden="true"
                                                              className="fas fa-angle-down"
                                                            />
                                                          </span>
                                                        </button>
                                                      </div>
                                                      <div
                                                        className="dropdown-menu"
                                                        id="dropdown-menu"
                                                        role="menu"
                                                      >
                                                        <div
                                                          className="dropdown-content"
                                                        >
                                                          <div
                                                            className="dropdown-item"
                                                            key="ZXZlbnQ="
                                                            onClick={[Function]}
                                                            onKeyPress={[Function]}
                                                            role="button"
                                                            tabIndex={0}
                                                          >
                                                            event
                                                          </div>
                                                          <div
                                                            className="dropdown-item"
                                                            key="bWVhc3VyZW1lbnQ="
                                                            onClick={[Function]}
                                                            onKeyPress={[Function]}
                                                            role="button"
                                                            tabIndex={0}
                                                          >
                                                            measurement
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </Dropdown>
                                                </div>
                                                <div
                                                  className="column is-5"
                                                >
                                                  <Dropdown
                                                    isActive={false}
                                                    isDisabled={true}
                                                    isLoading={false}
                                                    items={Array []}
                                                    label="Select observation"
                                                    onButtonClick={[Function]}
                                                    onItemClick={[Function]}
                                                    selectedItem={null}
                                                  >
                                                    <div
                                                      className="dropdown"
                                                    >
                                                      <div
                                                        className="dropdown-trigger"
                                                      >
                                                        <button
                                                          aria-controls="dropdown-menu"
                                                          aria-haspopup="true"
                                                          className="button"
                                                          disabled={true}
                                                          onClick={[Function]}
                                                        >
                                                          <span>
                                                            Select observation
                                                          </span>
                                                          <span
                                                            className="icon is-small"
                                                          >
                                                            <i
                                                              aria-hidden="true"
                                                              className="fas fa-angle-down"
                                                            />
                                                          </span>
                                                        </button>
                                                      </div>
                                                      <div
                                                        className="dropdown-menu"
                                                        id="dropdown-menu"
                                                        role="menu"
                                                      >
                                                        <div
                                                          className="dropdown-content"
                                                        />
                                                      </div>
                                                    </div>
                                                  </Dropdown>
                                                </div>
                                                <div
                                                  className="column"
                                                >
                                                  <button
                                                    className="button is-warning is-fullwidth"
                                                    disabled={true}
                                                    onClick={[Function]}
                                                  >
                                                    <span>
                                                      Reset
                                                    </span>
                                                    <span
                                                      className="icon is-small"
                                                    >
                                                      <i
                                                        aria-hidden="true"
                                                        className="fas fa-eraser"
                                                      />
                                                    </span>
                                                  </button>
                                                </div>
                                              </div>
                                            </div>
                                          </ParamsPanel>
                                          <BarChart>
                                            <div
                                              className="box"
                                            >
                                              <div
                                                className="columns"
                                              >
                                                <div
                                                  className="column barchart"
                                                >
                                                  <ResponsiveContainer
                                                    debounce={0}
                                                    height="100%"
                                                    width="100%"
                                                  >
                                                    <div
                                                      className="recharts-responsive-container"
                                                      style={
                                                        Object {
                                                          "height": "100%",
                                                          "maxHeight": undefined,
                                                          "minHeight": undefined,
                                                          "minWidth": undefined,
                                                          "width": "100%",
                                                        }
                                                      }
                                                    >
                                                      <BarChart
                                                        barCategoryGap="10%"
                                                        barGap={4}
                                                        data={
                                                          Array [
                                                            Object {
                                                              "amt": 2400,
                                                              "name": "Page A",
                                                              "pv": 2400,
                                                              "uv": 4000,
                                                            },
                                                            Object {
                                                              "amt": 2210,
                                                              "name": "Page B",
                                                              "pv": 1398,
                                                              "uv": 3000,
                                                            },
                                                            Object {
                                                              "amt": 2290,
                                                              "name": "Page C",
                                                              "pv": 9800,
                                                              "uv": 2000,
                                                            },
                                                          ]
                                                        }
                                                        height={0}
                                                        layout="horizontal"
                                                        margin={
                                                          Object {
                                                            "bottom": 5,
                                                            "left": 5,
                                                            "right": 5,
                                                            "top": 5,
                                                          }
                                                        }
                                                        reverseStackOrder={false}
                                                        stackOffset="none"
                                                        width={0}
                                                      />
                                                      <ResizeDetector
                                                        handleHeight={true}
                                                        handleWidth={true}
                                                        onResize={[Function]}
                                                        refreshRate={1000}
                                                        resizableElementId=""
                                                        skipOnMount={false}
                                                      >
                                                        <div
                                                          style={
                                                            Object {
                                                              "display": "none",
                                                              "height": 0,
                                                              "position": "absolute",
                                                              "visibility": "hidden",
                                                              "width": 0,
                                                            }
                                                          }
                                                        />
                                                      </ResizeDetector>
                                                    </div>
                                                  </ResponsiveContainer>
                                                </div>
                                              </div>
                                            </div>
                                          </BarChart>
                                        </div>
                                        <div
                                          className="column is-one-quarter"
                                        >
                                          <FiltersPanel>
                                            <div
                                              className="box"
                                            />
                                          </FiltersPanel>
                                        </div>
                                      </div>
                                    </div>
                                  </Stats>
                                </ResetOnUnmount>
                              </Connect(ResetOnUnmount)>
                            </Route>
                          </withRouter(Connect(ResetOnUnmount))>
                        </Connect(withRouter(Connect(ResetOnUnmount)))>
                      </Route>
                    </Switch>
                  </main>
                </div>
              </Main>
              <Modal
                isActive={true}
                messageStyle="is-danger"
                onCloseClick={[Function]}
                subTitle="Request failed"
                title="Error"
              >
                <div
                  className="modal is-active"
                >
                  <div
                    className="modal-background"
                    onClick={[Function]}
                    onKeyPress={[Function]}
                    role="button"
                    tabIndex={0}
                  />
                  <div
                    className="modal-content"
                  >
                    <article
                      className="message is-medium is-danger"
                    >
                      <div
                        className="message-header"
                      >
                        <p>
                          Error
                        </p>
                      </div>
                      <div
                        className="message-body has-text-centered"
                      >
                        Request failed
                      </div>
                    </article>
                  </div>
                  <button
                    aria-label="close"
                    className="modal-close is-large"
                    onClick={[Function]}
                  />
                </div>
              </Modal>
            </Provider>
          </App>
        </Connect(App)>
      </Route>
    </withRouter(Connect(App))>
  </Router>
</MemoryRouter>
`;

exports[`containers/app renders app with auth in / 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "REPLACE",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/things",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/things",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <withRouter(Connect(App))
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Route>
        <Connect(App)
          history={
            Object {
              "action": "REPLACE",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "pathname": "/things",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/things",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/things",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": false,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        >
          <App
            history={
              Object {
                "action": "REPLACE",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/things",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/things",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            isAuth={true}
            location={
              Object {
                "hash": "",
                "pathname": "/things",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": false,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            setShowError={[Function]}
            shouldShowError={false}
            store={
              Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
            storeSubscription={
              Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              }
            }
          >
            <Provider
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            >
              <Main>
                <div
                  className="has-navbar-fixed-top"
                >
                  <withRouter(Connect(Connect(ResetOnUnmount)))>
                    <Route>
                      <Connect(Connect(ResetOnUnmount))
                        history={
                          Object {
                            "action": "REPLACE",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      >
                        <Connect(ResetOnUnmount)
                          history={
                            Object {
                              "action": "REPLACE",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          isHamburgerMenuExpanded={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          logout={[Function]}
                          match={
                            Object {
                              "isExact": false,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                          toggleHamburgerMenu={[Function]}
                        >
                          <ResetOnUnmount
                            history={
                              Object {
                                "action": "REPLACE",
                                "block": [Function],
                                "canGo": [Function],
                                "createHref": [Function],
                                "entries": Array [
                                  Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  },
                                ],
                                "go": [Function],
                                "goBack": [Function],
                                "goForward": [Function],
                                "index": 0,
                                "length": 1,
                                "listen": [Function],
                                "location": Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                                "push": [Function],
                                "replace": [Function],
                              }
                            }
                            isHamburgerMenuExpanded={false}
                            location={
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              }
                            }
                            logout={[Function]}
                            match={
                              Object {
                                "isExact": false,
                                "params": Object {},
                                "path": "/",
                                "url": "/",
                              }
                            }
                            reset={[Function]}
                            toggleHamburgerMenu={[Function]}
                          >
                            <Navbar
                              history={
                                Object {
                                  "action": "REPLACE",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              isHamburgerMenuExpanded={false}
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              logout={[Function]}
                              match={
                                Object {
                                  "isExact": false,
                                  "params": Object {},
                                  "path": "/",
                                  "url": "/",
                                }
                              }
                              reset={[Function]}
                              toggleHamburgerMenu={[Function]}
                            >
                              <nav
                                className="navbar has-shadow is-spaced"
                              >
                                <div
                                  className="navbar-brand"
                                >
                                  <NavLink
                                    activeClassName="active"
                                    aria-current="page"
                                    className="navbar-item"
                                    to="/"
                                  >
                                    <Route
                                      path="\\\\/"
                                    >
                                      <Link
                                        aria-current="page"
                                        className="navbar-item active"
                                        replace={false}
                                        style={Object {}}
                                        to="/"
                                      >
                                        <a
                                          aria-current="page"
                                          className="navbar-item active"
                                          href="/"
                                          onClick={[Function]}
                                          style={Object {}}
                                        >
                                          <h1
                                            className="title"
                                          >
                                            IoT
                                          </h1>
                                        </a>
                                      </Link>
                                    </Route>
                                  </NavLink>
                                  <div
                                    className="navbar-burger burger"
                                    data-target="navbar-menu"
                                    onClick={[Function]}
                                    onKeyPress={[Function]}
                                    role="button"
                                    tabIndex={0}
                                  >
                                    <span />
                                    <span />
                                    <span />
                                  </div>
                                </div>
                                <div
                                  className="navbar-menu"
                                  id="navbar-menu"
                                >
                                  <div
                                    className="navbar-start"
                                  >
                                    <NavLink
                                      activeClassName="navbar-item-active"
                                      aria-current="page"
                                      className="navbar-item"
                                      to="/things"
                                    >
                                      <Route
                                        path="\\\\/things"
                                      >
                                        <Link
                                          aria-current="page"
                                          className="navbar-item navbar-item-active"
                                          replace={false}
                                          style={Object {}}
                                          to="/things"
                                        >
                                          <a
                                            aria-current="page"
                                            className="navbar-item navbar-item-active"
                                            href="/things"
                                            onClick={[Function]}
                                            style={Object {}}
                                          >
                                            <span
                                              className="icon"
                                            >
                                              <i
                                                className="fas fa-microchip"
                                              />
                                            </span>
                                            <span>
                                              Things
                                            </span>
                                          </a>
                                        </Link>
                                      </Route>
                                    </NavLink>
                                    <NavLink
                                      activeClassName="navbar-item-active"
                                      aria-current="page"
                                      className="navbar-item"
                                      to="/stats"
                                    >
                                      <Route
                                        path="\\\\/stats"
                                      >
                                        <Link
                                          aria-current={null}
                                          className="navbar-item"
                                          replace={false}
                                          to="/stats"
                                        >
                                          <a
                                            aria-current={null}
                                            className="navbar-item"
                                            href="/stats"
                                            onClick={[Function]}
                                          >
                                            <span
                                              className="icon"
                                            >
                                              <i
                                                className="fas fa-chart-bar"
                                              />
                                            </span>
                                            <span>
                                              Stats
                                            </span>
                                          </a>
                                        </Link>
                                      </Route>
                                    </NavLink>
                                  </div>
                                  <div
                                    className="navbar-end"
                                  >
                                    <div
                                      className="navbar-item"
                                    >
                                      <div
                                        className="field"
                                      >
                                        <p
                                          className="control"
                                        >
                                          <button
                                            className="button is-primary"
                                            id="logout-button"
                                            onClick={[Function]}
                                          >
                                            <span
                                              className="icon"
                                            >
                                              <i
                                                className="fa fa-user"
                                              />
                                            </span>
                                            <span>
                                              Logout
                                            </span>
                                          </button>
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </nav>
                            </Navbar>
                          </ResetOnUnmount>
                        </Connect(ResetOnUnmount)>
                      </Connect(Connect(ResetOnUnmount))>
                    </Route>
                  </withRouter(Connect(Connect(ResetOnUnmount)))>
                  <main>
                    <Switch>
                      <Route
                        component={[Function]}
                        computedMatch={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/things",
                            "url": "/things",
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        path="/things"
                      >
                        <withRouter(Connect(Connect(ResetOnUnmount)))
                          history={
                            Object {
                              "action": "REPLACE",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/things",
                              "url": "/things",
                            }
                          }
                        >
                          <Route>
                            <Connect(Connect(ResetOnUnmount))
                              history={
                                Object {
                                  "action": "REPLACE",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              match={
                                Object {
                                  "isExact": true,
                                  "params": Object {},
                                  "path": "/things",
                                  "url": "/things",
                                }
                              }
                            >
                              <Connect(ResetOnUnmount)
                                getThings={[Function]}
                                history={
                                  Object {
                                    "action": "REPLACE",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                isLoading={false}
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/things",
                                    "url": "/things",
                                  }
                                }
                                selectThing={[Function]}
                                selectedThing={null}
                                things={Array []}
                              >
                                <ResetOnUnmount
                                  getThings={[Function]}
                                  history={
                                    Object {
                                      "action": "REPLACE",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/things",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  isLoading={false}
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/things",
                                      "url": "/things",
                                    }
                                  }
                                  reset={[Function]}
                                  selectThing={[Function]}
                                  selectedThing={null}
                                  things={Array []}
                                >
                                  <Things
                                    getThings={[Function]}
                                    history={
                                      Object {
                                        "action": "REPLACE",
                                        "block": [Function],
                                        "canGo": [Function],
                                        "createHref": [Function],
                                        "entries": Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/things",
                                            "search": "",
                                            "state": undefined,
                                          },
                                        ],
                                        "go": [Function],
                                        "goBack": [Function],
                                        "goForward": [Function],
                                        "index": 0,
                                        "length": 1,
                                        "listen": [Function],
                                        "location": Object {
                                          "hash": "",
                                          "pathname": "/things",
                                          "search": "",
                                          "state": undefined,
                                        },
                                        "push": [Function],
                                        "replace": [Function],
                                      }
                                    }
                                    isLoading={false}
                                    location={
                                      Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      }
                                    }
                                    match={
                                      Object {
                                        "isExact": true,
                                        "params": Object {},
                                        "path": "/things",
                                        "url": "/things",
                                      }
                                    }
                                    reset={[Function]}
                                    selectThing={[Function]}
                                    selectedThing={null}
                                    things={Array []}
                                  >
                                    <div
                                      className="container is-fluid section"
                                    >
                                      <div
                                        className="columns"
                                      >
                                        <div
                                          className="column is-one-quarter"
                                        />
                                      </div>
                                    </div>
                                  </Things>
                                </ResetOnUnmount>
                              </Connect(ResetOnUnmount)>
                            </Connect(Connect(ResetOnUnmount))>
                          </Route>
                        </withRouter(Connect(Connect(ResetOnUnmount)))>
                      </Route>
                    </Switch>
                  </main>
                </div>
              </Main>
              <Modal
                isActive={false}
                messageStyle="is-danger"
                onCloseClick={[Function]}
                subTitle="Request failed"
                title="Error"
              >
                <div
                  className="modal"
                >
                  <div
                    className="modal-background"
                    onClick={[Function]}
                    onKeyPress={[Function]}
                    role="button"
                    tabIndex={0}
                  />
                  <div
                    className="modal-content"
                  >
                    <article
                      className="message is-medium is-danger"
                    >
                      <div
                        className="message-header"
                      >
                        <p>
                          Error
                        </p>
                      </div>
                      <div
                        className="message-body has-text-centered"
                      >
                        Request failed
                      </div>
                    </article>
                  </div>
                  <button
                    aria-label="close"
                    className="modal-close is-large"
                    onClick={[Function]}
                  />
                </div>
              </Modal>
            </Provider>
          </App>
        </Connect(App)>
      </Route>
    </withRouter(Connect(App))>
  </Router>
</MemoryRouter>
`;

exports[`containers/app renders the app with auth in /foo 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/foo",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "REPLACE",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/things",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/things",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <withRouter(Connect(App))
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Route>
        <Connect(App)
          history={
            Object {
              "action": "REPLACE",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "pathname": "/things",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/things",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/things",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": false,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        >
          <App
            history={
              Object {
                "action": "REPLACE",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/things",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/things",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            isAuth={true}
            location={
              Object {
                "hash": "",
                "pathname": "/things",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": false,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            setShowError={[Function]}
            shouldShowError={false}
            store={
              Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
            storeSubscription={
              Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              }
            }
          >
            <Provider
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            >
              <Main>
                <div
                  className="has-navbar-fixed-top"
                >
                  <withRouter(Connect(Connect(ResetOnUnmount)))>
                    <Route>
                      <Connect(Connect(ResetOnUnmount))
                        history={
                          Object {
                            "action": "REPLACE",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      >
                        <Connect(ResetOnUnmount)
                          history={
                            Object {
                              "action": "REPLACE",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          isHamburgerMenuExpanded={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          logout={[Function]}
                          match={
                            Object {
                              "isExact": false,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                          toggleHamburgerMenu={[Function]}
                        >
                          <ResetOnUnmount
                            history={
                              Object {
                                "action": "REPLACE",
                                "block": [Function],
                                "canGo": [Function],
                                "createHref": [Function],
                                "entries": Array [
                                  Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  },
                                ],
                                "go": [Function],
                                "goBack": [Function],
                                "goForward": [Function],
                                "index": 0,
                                "length": 1,
                                "listen": [Function],
                                "location": Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                                "push": [Function],
                                "replace": [Function],
                              }
                            }
                            isHamburgerMenuExpanded={false}
                            location={
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              }
                            }
                            logout={[Function]}
                            match={
                              Object {
                                "isExact": false,
                                "params": Object {},
                                "path": "/",
                                "url": "/",
                              }
                            }
                            reset={[Function]}
                            toggleHamburgerMenu={[Function]}
                          >
                            <Navbar
                              history={
                                Object {
                                  "action": "REPLACE",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              isHamburgerMenuExpanded={false}
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              logout={[Function]}
                              match={
                                Object {
                                  "isExact": false,
                                  "params": Object {},
                                  "path": "/",
                                  "url": "/",
                                }
                              }
                              reset={[Function]}
                              toggleHamburgerMenu={[Function]}
                            >
                              <nav
                                className="navbar has-shadow is-spaced"
                              >
                                <div
                                  className="navbar-brand"
                                >
                                  <NavLink
                                    activeClassName="active"
                                    aria-current="page"
                                    className="navbar-item"
                                    to="/"
                                  >
                                    <Route
                                      path="\\\\/"
                                    >
                                      <Link
                                        aria-current="page"
                                        className="navbar-item active"
                                        replace={false}
                                        style={Object {}}
                                        to="/"
                                      >
                                        <a
                                          aria-current="page"
                                          className="navbar-item active"
                                          href="/"
                                          onClick={[Function]}
                                          style={Object {}}
                                        >
                                          <h1
                                            className="title"
                                          >
                                            IoT
                                          </h1>
                                        </a>
                                      </Link>
                                    </Route>
                                  </NavLink>
                                  <div
                                    className="navbar-burger burger"
                                    data-target="navbar-menu"
                                    onClick={[Function]}
                                    onKeyPress={[Function]}
                                    role="button"
                                    tabIndex={0}
                                  >
                                    <span />
                                    <span />
                                    <span />
                                  </div>
                                </div>
                                <div
                                  className="navbar-menu"
                                  id="navbar-menu"
                                >
                                  <div
                                    className="navbar-start"
                                  >
                                    <NavLink
                                      activeClassName="navbar-item-active"
                                      aria-current="page"
                                      className="navbar-item"
                                      to="/things"
                                    >
                                      <Route
                                        path="\\\\/things"
                                      >
                                        <Link
                                          aria-current="page"
                                          className="navbar-item navbar-item-active"
                                          replace={false}
                                          style={Object {}}
                                          to="/things"
                                        >
                                          <a
                                            aria-current="page"
                                            className="navbar-item navbar-item-active"
                                            href="/things"
                                            onClick={[Function]}
                                            style={Object {}}
                                          >
                                            <span
                                              className="icon"
                                            >
                                              <i
                                                className="fas fa-microchip"
                                              />
                                            </span>
                                            <span>
                                              Things
                                            </span>
                                          </a>
                                        </Link>
                                      </Route>
                                    </NavLink>
                                    <NavLink
                                      activeClassName="navbar-item-active"
                                      aria-current="page"
                                      className="navbar-item"
                                      to="/stats"
                                    >
                                      <Route
                                        path="\\\\/stats"
                                      >
                                        <Link
                                          aria-current={null}
                                          className="navbar-item"
                                          replace={false}
                                          to="/stats"
                                        >
                                          <a
                                            aria-current={null}
                                            className="navbar-item"
                                            href="/stats"
                                            onClick={[Function]}
                                          >
                                            <span
                                              className="icon"
                                            >
                                              <i
                                                className="fas fa-chart-bar"
                                              />
                                            </span>
                                            <span>
                                              Stats
                                            </span>
                                          </a>
                                        </Link>
                                      </Route>
                                    </NavLink>
                                  </div>
                                  <div
                                    className="navbar-end"
                                  >
                                    <div
                                      className="navbar-item"
                                    >
                                      <div
                                        className="field"
                                      >
                                        <p
                                          className="control"
                                        >
                                          <button
                                            className="button is-primary"
                                            id="logout-button"
                                            onClick={[Function]}
                                          >
                                            <span
                                              className="icon"
                                            >
                                              <i
                                                className="fa fa-user"
                                              />
                                            </span>
                                            <span>
                                              Logout
                                            </span>
                                          </button>
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </nav>
                            </Navbar>
                          </ResetOnUnmount>
                        </Connect(ResetOnUnmount)>
                      </Connect(Connect(ResetOnUnmount))>
                    </Route>
                  </withRouter(Connect(Connect(ResetOnUnmount)))>
                  <main>
                    <Switch>
                      <Route
                        component={[Function]}
                        computedMatch={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/things",
                            "url": "/things",
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        path="/things"
                      >
                        <withRouter(Connect(Connect(ResetOnUnmount)))
                          history={
                            Object {
                              "action": "REPLACE",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/things",
                              "url": "/things",
                            }
                          }
                        >
                          <Route>
                            <Connect(Connect(ResetOnUnmount))
                              history={
                                Object {
                                  "action": "REPLACE",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              match={
                                Object {
                                  "isExact": true,
                                  "params": Object {},
                                  "path": "/things",
                                  "url": "/things",
                                }
                              }
                            >
                              <Connect(ResetOnUnmount)
                                getThings={[Function]}
                                history={
                                  Object {
                                    "action": "REPLACE",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                isLoading={false}
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/things",
                                    "url": "/things",
                                  }
                                }
                                selectThing={[Function]}
                                selectedThing={null}
                                things={Array []}
                              >
                                <ResetOnUnmount
                                  getThings={[Function]}
                                  history={
                                    Object {
                                      "action": "REPLACE",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/things",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  isLoading={false}
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/things",
                                      "url": "/things",
                                    }
                                  }
                                  reset={[Function]}
                                  selectThing={[Function]}
                                  selectedThing={null}
                                  things={Array []}
                                >
                                  <Things
                                    getThings={[Function]}
                                    history={
                                      Object {
                                        "action": "REPLACE",
                                        "block": [Function],
                                        "canGo": [Function],
                                        "createHref": [Function],
                                        "entries": Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/things",
                                            "search": "",
                                            "state": undefined,
                                          },
                                        ],
                                        "go": [Function],
                                        "goBack": [Function],
                                        "goForward": [Function],
                                        "index": 0,
                                        "length": 1,
                                        "listen": [Function],
                                        "location": Object {
                                          "hash": "",
                                          "pathname": "/things",
                                          "search": "",
                                          "state": undefined,
                                        },
                                        "push": [Function],
                                        "replace": [Function],
                                      }
                                    }
                                    isLoading={false}
                                    location={
                                      Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      }
                                    }
                                    match={
                                      Object {
                                        "isExact": true,
                                        "params": Object {},
                                        "path": "/things",
                                        "url": "/things",
                                      }
                                    }
                                    reset={[Function]}
                                    selectThing={[Function]}
                                    selectedThing={null}
                                    things={Array []}
                                  >
                                    <div
                                      className="container is-fluid section"
                                    >
                                      <div
                                        className="columns"
                                      >
                                        <div
                                          className="column is-one-quarter"
                                        />
                                      </div>
                                    </div>
                                  </Things>
                                </ResetOnUnmount>
                              </Connect(ResetOnUnmount)>
                            </Connect(Connect(ResetOnUnmount))>
                          </Route>
                        </withRouter(Connect(Connect(ResetOnUnmount)))>
                      </Route>
                    </Switch>
                  </main>
                </div>
              </Main>
              <Modal
                isActive={false}
                messageStyle="is-danger"
                onCloseClick={[Function]}
                subTitle="Request failed"
                title="Error"
              >
                <div
                  className="modal"
                >
                  <div
                    className="modal-background"
                    onClick={[Function]}
                    onKeyPress={[Function]}
                    role="button"
                    tabIndex={0}
                  />
                  <div
                    className="modal-content"
                  >
                    <article
                      className="message is-medium is-danger"
                    >
                      <div
                        className="message-header"
                      >
                        <p>
                          Error
                        </p>
                      </div>
                      <div
                        className="message-body has-text-centered"
                      >
                        Request failed
                      </div>
                    </article>
                  </div>
                  <button
                    aria-label="close"
                    className="modal-close is-large"
                    onClick={[Function]}
                  />
                </div>
              </Modal>
            </Provider>
          </App>
        </Connect(App)>
      </Route>
    </withRouter(Connect(App))>
  </Router>
</MemoryRouter>
`;

exports[`containers/app renders the app without auth 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <withRouter(Connect(App))
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Route>
        <Connect(App)
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        >
          <App
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            isAuth={false}
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            setShowError={[Function]}
            shouldShowError={false}
            store={
              Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
            storeSubscription={
              Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              }
            }
          >
            <Provider
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            >
              <Connect(Connect(ResetOnUnmount))>
                <Connect(ResetOnUnmount)
                  isAuth={[Function]}
                  isLoading={false}
                  login={[Function]}
                  logout={[Function]}
                  password={null}
                  setPassword={[Function]}
                  setUsername={[Function]}
                  username={null}
                >
                  <ResetOnUnmount
                    isAuth={[Function]}
                    isLoading={false}
                    login={[Function]}
                    logout={[Function]}
                    password={null}
                    reset={[Function]}
                    setPassword={[Function]}
                    setUsername={[Function]}
                    username={null}
                  >
                    <Login
                      isAuth={[Function]}
                      isLoading={false}
                      login={[Function]}
                      logout={[Function]}
                      password={null}
                      reset={[Function]}
                      setPassword={[Function]}
                      setUsername={[Function]}
                      username={null}
                    >
                      <section
                        className="hero is-fullheight"
                      >
                        <div
                          className="hero-body"
                        >
                          <div
                            className="container has-text-centered"
                          >
                            <div
                              className="column is-4 is-offset-4"
                            >
                              <div
                                className="box"
                              >
                                <p
                                  className="title is-1"
                                >
                                  IoT
                                </p>
                                <form>
                                  <div
                                    className="field"
                                  >
                                    <div
                                      className="control has-icons-left"
                                    >
                                      <input
                                        className="input is-large"
                                        id="username-input"
                                        onChange={[Function]}
                                        placeholder="Username"
                                        value=""
                                      />
                                      <span
                                        className="icon is-large is-left"
                                      >
                                        <i
                                          className="fas fa-user"
                                        />
                                      </span>
                                    </div>
                                  </div>
                                  <div
                                    className="field"
                                  >
                                    <div
                                      className="control has-icons-left"
                                    >
                                      <input
                                        className="input is-large"
                                        id="password-input"
                                        onChange={[Function]}
                                        placeholder="Password"
                                        type="password"
                                        value=""
                                      />
                                      <span
                                        className="icon is-large is-left"
                                      >
                                        <i
                                          className="fas fa-lock"
                                        />
                                      </span>
                                    </div>
                                  </div>
                                  <button
                                    className="button is-block is-primary is-large is-fullwidth"
                                    disabled={false}
                                    id="login-button"
                                    onClick={[Function]}
                                  >
                                    Login
                                  </button>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>
                      </section>
                    </Login>
                  </ResetOnUnmount>
                </Connect(ResetOnUnmount)>
              </Connect(Connect(ResetOnUnmount))>
              <Modal
                isActive={false}
                messageStyle="is-danger"
                onCloseClick={[Function]}
                subTitle="Request failed"
                title="Error"
              >
                <div
                  className="modal"
                >
                  <div
                    className="modal-background"
                    onClick={[Function]}
                    onKeyPress={[Function]}
                    role="button"
                    tabIndex={0}
                  />
                  <div
                    className="modal-content"
                  >
                    <article
                      className="message is-medium is-danger"
                    >
                      <div
                        className="message-header"
                      >
                        <p>
                          Error
                        </p>
                      </div>
                      <div
                        className="message-body has-text-centered"
                      >
                        Request failed
                      </div>
                    </article>
                  </div>
                  <button
                    aria-label="close"
                    className="modal-close is-large"
                    onClick={[Function]}
                  />
                </div>
              </Modal>
            </Provider>
          </App>
        </Connect(App)>
      </Route>
    </withRouter(Connect(App))>
  </Router>
</MemoryRouter>
`;

exports[`containers/app renders the with auth in /stats 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/stats",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/stats",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/stats",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <withRouter(Connect(App))
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Route>
        <Connect(App)
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "pathname": "/stats",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/stats",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/stats",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": false,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        >
          <App
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/stats",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/stats",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            isAuth={true}
            location={
              Object {
                "hash": "",
                "pathname": "/stats",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": false,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            setShowError={[Function]}
            shouldShowError={false}
            store={
              Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
            storeSubscription={
              Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              }
            }
          >
            <Provider
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            >
              <Main>
                <div
                  className="has-navbar-fixed-top"
                >
                  <withRouter(Connect(Connect(ResetOnUnmount)))>
                    <Route>
                      <Connect(Connect(ResetOnUnmount))
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/stats",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/stats",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/stats",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      >
                        <Connect(ResetOnUnmount)
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/stats",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/stats",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          isHamburgerMenuExpanded={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/stats",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          logout={[Function]}
                          match={
                            Object {
                              "isExact": false,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                          toggleHamburgerMenu={[Function]}
                        >
                          <ResetOnUnmount
                            history={
                              Object {
                                "action": "POP",
                                "block": [Function],
                                "canGo": [Function],
                                "createHref": [Function],
                                "entries": Array [
                                  Object {
                                    "hash": "",
                                    "pathname": "/stats",
                                    "search": "",
                                    "state": undefined,
                                  },
                                ],
                                "go": [Function],
                                "goBack": [Function],
                                "goForward": [Function],
                                "index": 0,
                                "length": 1,
                                "listen": [Function],
                                "location": Object {
                                  "hash": "",
                                  "pathname": "/stats",
                                  "search": "",
                                  "state": undefined,
                                },
                                "push": [Function],
                                "replace": [Function],
                              }
                            }
                            isHamburgerMenuExpanded={false}
                            location={
                              Object {
                                "hash": "",
                                "pathname": "/stats",
                                "search": "",
                                "state": undefined,
                              }
                            }
                            logout={[Function]}
                            match={
                              Object {
                                "isExact": false,
                                "params": Object {},
                                "path": "/",
                                "url": "/",
                              }
                            }
                            reset={[Function]}
                            toggleHamburgerMenu={[Function]}
                          >
                            <Navbar
                              history={
                                Object {
                                  "action": "POP",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/stats",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/stats",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              isHamburgerMenuExpanded={false}
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/stats",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              logout={[Function]}
                              match={
                                Object {
                                  "isExact": false,
                                  "params": Object {},
                                  "path": "/",
                                  "url": "/",
                                }
                              }
                              reset={[Function]}
                              toggleHamburgerMenu={[Function]}
                            >
                              <nav
                                className="navbar has-shadow is-spaced"
                              >
                                <div
                                  className="navbar-brand"
                                >
                                  <NavLink
                                    activeClassName="active"
                                    aria-current="page"
                                    className="navbar-item"
                                    to="/"
                                  >
                                    <Route
                                      path="\\\\/"
                                    >
                                      <Link
                                        aria-current="page"
                                        className="navbar-item active"
                                        replace={false}
                                        style={Object {}}
                                        to="/"
                                      >
                                        <a
                                          aria-current="page"
                                          className="navbar-item active"
                                          href="/"
                                          onClick={[Function]}
                                          style={Object {}}
                                        >
                                          <h1
                                            className="title"
                                          >
                                            IoT
                                          </h1>
                                        </a>
                                      </Link>
                                    </Route>
                                  </NavLink>
                                  <div
                                    className="navbar-burger burger"
                                    data-target="navbar-menu"
                                    onClick={[Function]}
                                    onKeyPress={[Function]}
                                    role="button"
                                    tabIndex={0}
                                  >
                                    <span />
                                    <span />
                                    <span />
                                  </div>
                                </div>
                                <div
                                  className="navbar-menu"
                                  id="navbar-menu"
                                >
                                  <div
                                    className="navbar-start"
                                  >
                                    <NavLink
                                      activeClassName="navbar-item-active"
                                      aria-current="page"
                                      className="navbar-item"
                                      to="/things"
                                    >
                                      <Route
                                        path="\\\\/things"
                                      >
                                        <Link
                                          aria-current={null}
                                          className="navbar-item"
                                          replace={false}
                                          to="/things"
                                        >
                                          <a
                                            aria-current={null}
                                            className="navbar-item"
                                            href="/things"
                                            onClick={[Function]}
                                          >
                                            <span
                                              className="icon"
                                            >
                                              <i
                                                className="fas fa-microchip"
                                              />
                                            </span>
                                            <span>
                                              Things
                                            </span>
                                          </a>
                                        </Link>
                                      </Route>
                                    </NavLink>
                                    <NavLink
                                      activeClassName="navbar-item-active"
                                      aria-current="page"
                                      className="navbar-item"
                                      to="/stats"
                                    >
                                      <Route
                                        path="\\\\/stats"
                                      >
                                        <Link
                                          aria-current="page"
                                          className="navbar-item navbar-item-active"
                                          replace={false}
                                          style={Object {}}
                                          to="/stats"
                                        >
                                          <a
                                            aria-current="page"
                                            className="navbar-item navbar-item-active"
                                            href="/stats"
                                            onClick={[Function]}
                                            style={Object {}}
                                          >
                                            <span
                                              className="icon"
                                            >
                                              <i
                                                className="fas fa-chart-bar"
                                              />
                                            </span>
                                            <span>
                                              Stats
                                            </span>
                                          </a>
                                        </Link>
                                      </Route>
                                    </NavLink>
                                  </div>
                                  <div
                                    className="navbar-end"
                                  >
                                    <div
                                      className="navbar-item"
                                    >
                                      <div
                                        className="field"
                                      >
                                        <p
                                          className="control"
                                        >
                                          <button
                                            className="button is-primary"
                                            id="logout-button"
                                            onClick={[Function]}
                                          >
                                            <span
                                              className="icon"
                                            >
                                              <i
                                                className="fa fa-user"
                                              />
                                            </span>
                                            <span>
                                              Logout
                                            </span>
                                          </button>
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </nav>
                            </Navbar>
                          </ResetOnUnmount>
                        </Connect(ResetOnUnmount)>
                      </Connect(Connect(ResetOnUnmount))>
                    </Route>
                  </withRouter(Connect(Connect(ResetOnUnmount)))>
                  <main>
                    <Switch>
                      <Route
                        component={[Function]}
                        computedMatch={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/stats",
                            "url": "/stats",
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/stats",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        path="/stats"
                      >
                        <Connect(withRouter(Connect(ResetOnUnmount)))
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/stats",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/stats",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/stats",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/stats",
                              "url": "/stats",
                            }
                          }
                        >
                          <withRouter(Connect(ResetOnUnmount))
                            getStats={[Function]}
                            history={
                              Object {
                                "action": "POP",
                                "block": [Function],
                                "canGo": [Function],
                                "createHref": [Function],
                                "entries": Array [
                                  Object {
                                    "hash": "",
                                    "pathname": "/stats",
                                    "search": "",
                                    "state": undefined,
                                  },
                                ],
                                "go": [Function],
                                "goBack": [Function],
                                "goForward": [Function],
                                "index": 0,
                                "length": 1,
                                "listen": [Function],
                                "location": Object {
                                  "hash": "",
                                  "pathname": "/stats",
                                  "search": "",
                                  "state": undefined,
                                },
                                "push": [Function],
                                "replace": [Function],
                              }
                            }
                            isResetDisabled={true}
                            location={
                              Object {
                                "hash": "",
                                "pathname": "/stats",
                                "search": "",
                                "state": undefined,
                              }
                            }
                            match={
                              Object {
                                "isExact": true,
                                "params": Object {},
                                "path": "/stats",
                                "url": "/stats",
                              }
                            }
                            observation={
                              Object {
                                "isActive": false,
                                "isDisabled": true,
                                "isLoading": false,
                                "items": Array [],
                                "selectedItem": null,
                              }
                            }
                            reset={[Function]}
                            selectObservation={[Function]}
                            selectType={[Function]}
                            type={
                              Object {
                                "isActive": false,
                                "items": Array [
                                  "event",
                                  "measurement",
                                ],
                                "selectedItem": null,
                              }
                            }
                            updateObservation={[Function]}
                            updateType={[Function]}
                          >
                            <Route>
                              <Connect(ResetOnUnmount)
                                getStats={[Function]}
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/stats",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/stats",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                isResetDisabled={true}
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/stats",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/stats",
                                    "url": "/stats",
                                  }
                                }
                                observation={
                                  Object {
                                    "isActive": false,
                                    "isDisabled": true,
                                    "isLoading": false,
                                    "items": Array [],
                                    "selectedItem": null,
                                  }
                                }
                                reset={[Function]}
                                selectObservation={[Function]}
                                selectType={[Function]}
                                type={
                                  Object {
                                    "isActive": false,
                                    "items": Array [
                                      "event",
                                      "measurement",
                                    ],
                                    "selectedItem": null,
                                  }
                                }
                                updateObservation={[Function]}
                                updateType={[Function]}
                              >
                                <ResetOnUnmount
                                  getStats={[Function]}
                                  history={
                                    Object {
                                      "action": "POP",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/stats",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/stats",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  isResetDisabled={true}
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/stats",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/stats",
                                      "url": "/stats",
                                    }
                                  }
                                  observation={
                                    Object {
                                      "isActive": false,
                                      "isDisabled": true,
                                      "isLoading": false,
                                      "items": Array [],
                                      "selectedItem": null,
                                    }
                                  }
                                  reset={[Function]}
                                  selectObservation={[Function]}
                                  selectType={[Function]}
                                  type={
                                    Object {
                                      "isActive": false,
                                      "items": Array [
                                        "event",
                                        "measurement",
                                      ],
                                      "selectedItem": null,
                                    }
                                  }
                                  updateObservation={[Function]}
                                  updateType={[Function]}
                                >
                                  <Stats
                                    getStats={[Function]}
                                    history={
                                      Object {
                                        "action": "POP",
                                        "block": [Function],
                                        "canGo": [Function],
                                        "createHref": [Function],
                                        "entries": Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/stats",
                                            "search": "",
                                            "state": undefined,
                                          },
                                        ],
                                        "go": [Function],
                                        "goBack": [Function],
                                        "goForward": [Function],
                                        "index": 0,
                                        "length": 1,
                                        "listen": [Function],
                                        "location": Object {
                                          "hash": "",
                                          "pathname": "/stats",
                                          "search": "",
                                          "state": undefined,
                                        },
                                        "push": [Function],
                                        "replace": [Function],
                                      }
                                    }
                                    isResetDisabled={true}
                                    location={
                                      Object {
                                        "hash": "",
                                        "pathname": "/stats",
                                        "search": "",
                                        "state": undefined,
                                      }
                                    }
                                    match={
                                      Object {
                                        "isExact": true,
                                        "params": Object {},
                                        "path": "/stats",
                                        "url": "/stats",
                                      }
                                    }
                                    observation={
                                      Object {
                                        "isActive": false,
                                        "isDisabled": true,
                                        "isLoading": false,
                                        "items": Array [],
                                        "selectedItem": null,
                                      }
                                    }
                                    reset={[Function]}
                                    selectObservation={[Function]}
                                    selectType={[Function]}
                                    type={
                                      Object {
                                        "isActive": false,
                                        "items": Array [
                                          "event",
                                          "measurement",
                                        ],
                                        "selectedItem": null,
                                      }
                                    }
                                    updateObservation={[Function]}
                                    updateType={[Function]}
                                  >
                                    <div
                                      className="container is-fluid section"
                                    >
                                      <div
                                        className="columns"
                                      >
                                        <div
                                          className="column is-three-quarters"
                                        >
                                          <ParamsPanel
                                            observation={
                                              Object {
                                                "isActive": false,
                                                "isDisabled": true,
                                                "isLoading": false,
                                                "items": Array [],
                                                "label": "Select observation",
                                                "onButtonClick": [Function],
                                                "onItemClick": [Function],
                                                "selectedItem": null,
                                              }
                                            }
                                            reset={
                                              Object {
                                                "isDisabled": true,
                                                "onReset": [Function],
                                              }
                                            }
                                            type={
                                              Object {
                                                "isActive": false,
                                                "items": Array [
                                                  "event",
                                                  "measurement",
                                                ],
                                                "label": "Select type",
                                                "onButtonClick": [Function],
                                                "onItemClick": [Function],
                                                "selectedItem": null,
                                              }
                                            }
                                          >
                                            <div
                                              className="box"
                                            >
                                              <div
                                                className="columns"
                                              >
                                                <div
                                                  className="column is-5"
                                                >
                                                  <Dropdown
                                                    isActive={false}
                                                    isDisabled={false}
                                                    isLoading={false}
                                                    items={
                                                      Array [
                                                        "event",
                                                        "measurement",
                                                      ]
                                                    }
                                                    label="Select type"
                                                    onButtonClick={[Function]}
                                                    onItemClick={[Function]}
                                                    selectedItem={null}
                                                  >
                                                    <div
                                                      className="dropdown"
                                                    >
                                                      <div
                                                        className="dropdown-trigger"
                                                      >
                                                        <button
                                                          aria-controls="dropdown-menu"
                                                          aria-haspopup="true"
                                                          className="button"
                                                          disabled={false}
                                                          onClick={[Function]}
                                                        >
                                                          <span>
                                                            Select type
                                                          </span>
                                                          <span
                                                            className="icon is-small"
                                                          >
                                                            <i
                                                              aria-hidden="true"
                                                              className="fas fa-angle-down"
                                                            />
                                                          </span>
                                                        </button>
                                                      </div>
                                                      <div
                                                        className="dropdown-menu"
                                                        id="dropdown-menu"
                                                        role="menu"
                                                      >
                                                        <div
                                                          className="dropdown-content"
                                                        >
                                                          <div
                                                            className="dropdown-item"
                                                            key="ZXZlbnQ="
                                                            onClick={[Function]}
                                                            onKeyPress={[Function]}
                                                            role="button"
                                                            tabIndex={0}
                                                          >
                                                            event
                                                          </div>
                                                          <div
                                                            className="dropdown-item"
                                                            key="bWVhc3VyZW1lbnQ="
                                                            onClick={[Function]}
                                                            onKeyPress={[Function]}
                                                            role="button"
                                                            tabIndex={0}
                                                          >
                                                            measurement
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </Dropdown>
                                                </div>
                                                <div
                                                  className="column is-5"
                                                >
                                                  <Dropdown
                                                    isActive={false}
                                                    isDisabled={true}
                                                    isLoading={false}
                                                    items={Array []}
                                                    label="Select observation"
                                                    onButtonClick={[Function]}
                                                    onItemClick={[Function]}
                                                    selectedItem={null}
                                                  >
                                                    <div
                                                      className="dropdown"
                                                    >
                                                      <div
                                                        className="dropdown-trigger"
                                                      >
                                                        <button
                                                          aria-controls="dropdown-menu"
                                                          aria-haspopup="true"
                                                          className="button"
                                                          disabled={true}
                                                          onClick={[Function]}
                                                        >
                                                          <span>
                                                            Select observation
                                                          </span>
                                                          <span
                                                            className="icon is-small"
                                                          >
                                                            <i
                                                              aria-hidden="true"
                                                              className="fas fa-angle-down"
                                                            />
                                                          </span>
                                                        </button>
                                                      </div>
                                                      <div
                                                        className="dropdown-menu"
                                                        id="dropdown-menu"
                                                        role="menu"
                                                      >
                                                        <div
                                                          className="dropdown-content"
                                                        />
                                                      </div>
                                                    </div>
                                                  </Dropdown>
                                                </div>
                                                <div
                                                  className="column"
                                                >
                                                  <button
                                                    className="button is-warning is-fullwidth"
                                                    disabled={true}
                                                    onClick={[Function]}
                                                  >
                                                    <span>
                                                      Reset
                                                    </span>
                                                    <span
                                                      className="icon is-small"
                                                    >
                                                      <i
                                                        aria-hidden="true"
                                                        className="fas fa-eraser"
                                                      />
                                                    </span>
                                                  </button>
                                                </div>
                                              </div>
                                            </div>
                                          </ParamsPanel>
                                          <BarChart>
                                            <div
                                              className="box"
                                            >
                                              <div
                                                className="columns"
                                              >
                                                <div
                                                  className="column barchart"
                                                >
                                                  <ResponsiveContainer
                                                    debounce={0}
                                                    height="100%"
                                                    width="100%"
                                                  >
                                                    <div
                                                      className="recharts-responsive-container"
                                                      style={
                                                        Object {
                                                          "height": "100%",
                                                          "maxHeight": undefined,
                                                          "minHeight": undefined,
                                                          "minWidth": undefined,
                                                          "width": "100%",
                                                        }
                                                      }
                                                    >
                                                      <BarChart
                                                        barCategoryGap="10%"
                                                        barGap={4}
                                                        data={
                                                          Array [
                                                            Object {
                                                              "amt": 2400,
                                                              "name": "Page A",
                                                              "pv": 2400,
                                                              "uv": 4000,
                                                            },
                                                            Object {
                                                              "amt": 2210,
                                                              "name": "Page B",
                                                              "pv": 1398,
                                                              "uv": 3000,
                                                            },
                                                            Object {
                                                              "amt": 2290,
                                                              "name": "Page C",
                                                              "pv": 9800,
                                                              "uv": 2000,
                                                            },
                                                          ]
                                                        }
                                                        height={0}
                                                        layout="horizontal"
                                                        margin={
                                                          Object {
                                                            "bottom": 5,
                                                            "left": 5,
                                                            "right": 5,
                                                            "top": 5,
                                                          }
                                                        }
                                                        reverseStackOrder={false}
                                                        stackOffset="none"
                                                        width={0}
                                                      />
                                                      <ResizeDetector
                                                        handleHeight={true}
                                                        handleWidth={true}
                                                        onResize={[Function]}
                                                        refreshRate={1000}
                                                        resizableElementId=""
                                                        skipOnMount={false}
                                                      >
                                                        <div
                                                          style={
                                                            Object {
                                                              "display": "none",
                                                              "height": 0,
                                                              "position": "absolute",
                                                              "visibility": "hidden",
                                                              "width": 0,
                                                            }
                                                          }
                                                        />
                                                      </ResizeDetector>
                                                    </div>
                                                  </ResponsiveContainer>
                                                </div>
                                              </div>
                                            </div>
                                          </BarChart>
                                        </div>
                                        <div
                                          className="column is-one-quarter"
                                        >
                                          <FiltersPanel>
                                            <div
                                              className="box"
                                            />
                                          </FiltersPanel>
                                        </div>
                                      </div>
                                    </div>
                                  </Stats>
                                </ResetOnUnmount>
                              </Connect(ResetOnUnmount)>
                            </Route>
                          </withRouter(Connect(ResetOnUnmount))>
                        </Connect(withRouter(Connect(ResetOnUnmount)))>
                      </Route>
                    </Switch>
                  </main>
                </div>
              </Main>
              <Modal
                isActive={false}
                messageStyle="is-danger"
                onCloseClick={[Function]}
                subTitle="Request failed"
                title="Error"
              >
                <div
                  className="modal"
                >
                  <div
                    className="modal-background"
                    onClick={[Function]}
                    onKeyPress={[Function]}
                    role="button"
                    tabIndex={0}
                  />
                  <div
                    className="modal-content"
                  >
                    <article
                      className="message is-medium is-danger"
                    >
                      <div
                        className="message-header"
                      >
                        <p>
                          Error
                        </p>
                      </div>
                      <div
                        className="message-body has-text-centered"
                      >
                        Request failed
                      </div>
                    </article>
                  </div>
                  <button
                    aria-label="close"
                    className="modal-close is-large"
                    onClick={[Function]}
                  />
                </div>
              </Modal>
            </Provider>
          </App>
        </Connect(App)>
      </Route>
    </withRouter(Connect(App))>
  </Router>
</MemoryRouter>
`;

exports[`containers/app renders the with auth in /things 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/things",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/things",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/things",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <withRouter(Connect(App))
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Route>
        <Connect(App)
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "pathname": "/things",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/things",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/things",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": false,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        >
          <App
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/things",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/things",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            isAuth={true}
            location={
              Object {
                "hash": "",
                "pathname": "/things",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": false,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            setShowError={[Function]}
            shouldShowError={false}
            store={
              Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
            storeSubscription={
              Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              }
            }
          >
            <Provider
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            >
              <Main>
                <div
                  className="has-navbar-fixed-top"
                >
                  <withRouter(Connect(Connect(ResetOnUnmount)))>
                    <Route>
                      <Connect(Connect(ResetOnUnmount))
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": false,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      >
                        <Connect(ResetOnUnmount)
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          isHamburgerMenuExpanded={false}
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          logout={[Function]}
                          match={
                            Object {
                              "isExact": false,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                          toggleHamburgerMenu={[Function]}
                        >
                          <ResetOnUnmount
                            history={
                              Object {
                                "action": "POP",
                                "block": [Function],
                                "canGo": [Function],
                                "createHref": [Function],
                                "entries": Array [
                                  Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  },
                                ],
                                "go": [Function],
                                "goBack": [Function],
                                "goForward": [Function],
                                "index": 0,
                                "length": 1,
                                "listen": [Function],
                                "location": Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                                "push": [Function],
                                "replace": [Function],
                              }
                            }
                            isHamburgerMenuExpanded={false}
                            location={
                              Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              }
                            }
                            logout={[Function]}
                            match={
                              Object {
                                "isExact": false,
                                "params": Object {},
                                "path": "/",
                                "url": "/",
                              }
                            }
                            reset={[Function]}
                            toggleHamburgerMenu={[Function]}
                          >
                            <Navbar
                              history={
                                Object {
                                  "action": "POP",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              isHamburgerMenuExpanded={false}
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              logout={[Function]}
                              match={
                                Object {
                                  "isExact": false,
                                  "params": Object {},
                                  "path": "/",
                                  "url": "/",
                                }
                              }
                              reset={[Function]}
                              toggleHamburgerMenu={[Function]}
                            >
                              <nav
                                className="navbar has-shadow is-spaced"
                              >
                                <div
                                  className="navbar-brand"
                                >
                                  <NavLink
                                    activeClassName="active"
                                    aria-current="page"
                                    className="navbar-item"
                                    to="/"
                                  >
                                    <Route
                                      path="\\\\/"
                                    >
                                      <Link
                                        aria-current="page"
                                        className="navbar-item active"
                                        replace={false}
                                        style={Object {}}
                                        to="/"
                                      >
                                        <a
                                          aria-current="page"
                                          className="navbar-item active"
                                          href="/"
                                          onClick={[Function]}
                                          style={Object {}}
                                        >
                                          <h1
                                            className="title"
                                          >
                                            IoT
                                          </h1>
                                        </a>
                                      </Link>
                                    </Route>
                                  </NavLink>
                                  <div
                                    className="navbar-burger burger"
                                    data-target="navbar-menu"
                                    onClick={[Function]}
                                    onKeyPress={[Function]}
                                    role="button"
                                    tabIndex={0}
                                  >
                                    <span />
                                    <span />
                                    <span />
                                  </div>
                                </div>
                                <div
                                  className="navbar-menu"
                                  id="navbar-menu"
                                >
                                  <div
                                    className="navbar-start"
                                  >
                                    <NavLink
                                      activeClassName="navbar-item-active"
                                      aria-current="page"
                                      className="navbar-item"
                                      to="/things"
                                    >
                                      <Route
                                        path="\\\\/things"
                                      >
                                        <Link
                                          aria-current="page"
                                          className="navbar-item navbar-item-active"
                                          replace={false}
                                          style={Object {}}
                                          to="/things"
                                        >
                                          <a
                                            aria-current="page"
                                            className="navbar-item navbar-item-active"
                                            href="/things"
                                            onClick={[Function]}
                                            style={Object {}}
                                          >
                                            <span
                                              className="icon"
                                            >
                                              <i
                                                className="fas fa-microchip"
                                              />
                                            </span>
                                            <span>
                                              Things
                                            </span>
                                          </a>
                                        </Link>
                                      </Route>
                                    </NavLink>
                                    <NavLink
                                      activeClassName="navbar-item-active"
                                      aria-current="page"
                                      className="navbar-item"
                                      to="/stats"
                                    >
                                      <Route
                                        path="\\\\/stats"
                                      >
                                        <Link
                                          aria-current={null}
                                          className="navbar-item"
                                          replace={false}
                                          to="/stats"
                                        >
                                          <a
                                            aria-current={null}
                                            className="navbar-item"
                                            href="/stats"
                                            onClick={[Function]}
                                          >
                                            <span
                                              className="icon"
                                            >
                                              <i
                                                className="fas fa-chart-bar"
                                              />
                                            </span>
                                            <span>
                                              Stats
                                            </span>
                                          </a>
                                        </Link>
                                      </Route>
                                    </NavLink>
                                  </div>
                                  <div
                                    className="navbar-end"
                                  >
                                    <div
                                      className="navbar-item"
                                    >
                                      <div
                                        className="field"
                                      >
                                        <p
                                          className="control"
                                        >
                                          <button
                                            className="button is-primary"
                                            id="logout-button"
                                            onClick={[Function]}
                                          >
                                            <span
                                              className="icon"
                                            >
                                              <i
                                                className="fa fa-user"
                                              />
                                            </span>
                                            <span>
                                              Logout
                                            </span>
                                          </button>
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </nav>
                            </Navbar>
                          </ResetOnUnmount>
                        </Connect(ResetOnUnmount)>
                      </Connect(Connect(ResetOnUnmount))>
                    </Route>
                  </withRouter(Connect(Connect(ResetOnUnmount)))>
                  <main>
                    <Switch>
                      <Route
                        component={[Function]}
                        computedMatch={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/things",
                            "url": "/things",
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/things",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        path="/things"
                      >
                        <withRouter(Connect(Connect(ResetOnUnmount)))
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "pathname": "/things",
                                "search": "",
                                "state": undefined,
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          location={
                            Object {
                              "hash": "",
                              "pathname": "/things",
                              "search": "",
                              "state": undefined,
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/things",
                              "url": "/things",
                            }
                          }
                        >
                          <Route>
                            <Connect(Connect(ResetOnUnmount))
                              history={
                                Object {
                                  "action": "POP",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/things",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              match={
                                Object {
                                  "isExact": true,
                                  "params": Object {},
                                  "path": "/things",
                                  "url": "/things",
                                }
                              }
                            >
                              <Connect(ResetOnUnmount)
                                getThings={[Function]}
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                isLoading={false}
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/things",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/things",
                                    "url": "/things",
                                  }
                                }
                                selectThing={[Function]}
                                selectedThing={null}
                                things={Array []}
                              >
                                <ResetOnUnmount
                                  getThings={[Function]}
                                  history={
                                    Object {
                                      "action": "POP",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/things",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  isLoading={false}
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/things",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/things",
                                      "url": "/things",
                                    }
                                  }
                                  reset={[Function]}
                                  selectThing={[Function]}
                                  selectedThing={null}
                                  things={Array []}
                                >
                                  <Things
                                    getThings={[Function]}
                                    history={
                                      Object {
                                        "action": "POP",
                                        "block": [Function],
                                        "canGo": [Function],
                                        "createHref": [Function],
                                        "entries": Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/things",
                                            "search": "",
                                            "state": undefined,
                                          },
                                        ],
                                        "go": [Function],
                                        "goBack": [Function],
                                        "goForward": [Function],
                                        "index": 0,
                                        "length": 1,
                                        "listen": [Function],
                                        "location": Object {
                                          "hash": "",
                                          "pathname": "/things",
                                          "search": "",
                                          "state": undefined,
                                        },
                                        "push": [Function],
                                        "replace": [Function],
                                      }
                                    }
                                    isLoading={false}
                                    location={
                                      Object {
                                        "hash": "",
                                        "pathname": "/things",
                                        "search": "",
                                        "state": undefined,
                                      }
                                    }
                                    match={
                                      Object {
                                        "isExact": true,
                                        "params": Object {},
                                        "path": "/things",
                                        "url": "/things",
                                      }
                                    }
                                    reset={[Function]}
                                    selectThing={[Function]}
                                    selectedThing={null}
                                    things={Array []}
                                  >
                                    <div
                                      className="container is-fluid section"
                                    >
                                      <div
                                        className="columns"
                                      >
                                        <div
                                          className="column is-one-quarter"
                                        />
                                      </div>
                                    </div>
                                  </Things>
                                </ResetOnUnmount>
                              </Connect(ResetOnUnmount)>
                            </Connect(Connect(ResetOnUnmount))>
                          </Route>
                        </withRouter(Connect(Connect(ResetOnUnmount)))>
                      </Route>
                    </Switch>
                  </main>
                </div>
              </Main>
              <Modal
                isActive={false}
                messageStyle="is-danger"
                onCloseClick={[Function]}
                subTitle="Request failed"
                title="Error"
              >
                <div
                  className="modal"
                >
                  <div
                    className="modal-background"
                    onClick={[Function]}
                    onKeyPress={[Function]}
                    role="button"
                    tabIndex={0}
                  />
                  <div
                    className="modal-content"
                  >
                    <article
                      className="message is-medium is-danger"
                    >
                      <div
                        className="message-header"
                      >
                        <p>
                          Error
                        </p>
                      </div>
                      <div
                        className="message-body has-text-centered"
                      >
                        Request failed
                      </div>
                    </article>
                  </div>
                  <button
                    aria-label="close"
                    className="modal-close is-large"
                    onClick={[Function]}
                  />
                </div>
              </Modal>
            </Provider>
          </App>
        </Connect(App)>
      </Route>
    </withRouter(Connect(App))>
  </Router>
</MemoryRouter>
`;
