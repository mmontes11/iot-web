// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/app renders the app 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      "/",
    ]
  }
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <withRouter(Connect(App))
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Route>
        <Connect(App)
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        >
          <App
            dispatch={[Function]}
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            isAuth={false}
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            store={
              Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              }
            }
            storeSubscription={
              Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              }
            }
          >
            <Provider
              store={
                Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            >
              <Connect(Login)>
                <Login
                  isAuth={[Function]}
                  isLoading={false}
                  login={[Function]}
                  password={null}
                  setPassword={[Function]}
                  setShowError={[Function]}
                  setUsername={[Function]}
                  shouldShowError={false}
                  username={null}
                >
                  <section
                    className="hero has-background-light is-fullheight"
                  >
                    <div
                      className="hero-body"
                    >
                      <div
                        className="container has-text-centered"
                      >
                        <div
                          className="column is-4 is-offset-4"
                        >
                          <div
                            className="box"
                          >
                            <p
                              className="title is-1"
                            >
                              IoT
                            </p>
                            <form>
                              <div
                                className="field"
                              >
                                <div
                                  className="control has-icons-left"
                                >
                                  <input
                                    className="input is-large"
                                    onChange={[Function]}
                                    placeholder="Username"
                                    value=""
                                  />
                                  <span
                                    className="icon is-large is-left"
                                  >
                                    <i
                                      className="fas fa-user"
                                    />
                                  </span>
                                </div>
                              </div>
                              <div
                                className="field"
                              >
                                <div
                                  className="control has-icons-left"
                                >
                                  <input
                                    className="input is-large"
                                    onChange={[Function]}
                                    placeholder="Password"
                                    type="password"
                                    value=""
                                  />
                                  <span
                                    className="icon is-large is-left"
                                  >
                                    <i
                                      className="fas fa-lock"
                                    />
                                  </span>
                                </div>
                              </div>
                              <button
                                className="button is-block is-primary is-large is-fullwidth"
                                disabled={false}
                                onClick={[Function]}
                              >
                                Login
                              </button>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>
                    <Modal
                      isActive={false}
                      messageStyle={
                        Object {
                          "is-danger": true,
                        }
                      }
                      onCloseClick={[Function]}
                      subTitle="Invalid Credentials"
                      title="Error"
                    >
                      <div
                        className="modal"
                      >
                        <div
                          className="modal-background"
                          onClick={[Function]}
                          onKeyPress={[Function]}
                          role="link"
                          tabIndex={0}
                        />
                        <div
                          className="modal-content"
                        >
                          <article
                            className="message is-medium is-danger"
                          >
                            <div
                              className="message-header"
                            >
                              <p>
                                Error
                              </p>
                            </div>
                            <div
                              className="message-body has-text-centered"
                            >
                              Invalid Credentials
                            </div>
                          </article>
                        </div>
                        <button
                          aria-label="close"
                          className="modal-close is-large"
                          onClick={[Function]}
                        />
                      </div>
                    </Modal>
                  </section>
                </Login>
              </Connect(Login)>
            </Provider>
          </App>
        </Connect(App)>
      </Route>
    </withRouter(Connect(App))>
  </Router>
</MemoryRouter>
`;
